/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.editor;

import compiler.Error;
import gui.Errores;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

/**
 *
 * @author ce
 */
public class Editor extends javax.swing.JFrame {

  /**
   * Creates new form Editor
   */
  public Editor() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jToolBar1 = new javax.swing.JToolBar();
    jLabel1 = new javax.swing.JLabel();
    tabPane = new javax.swing.JTabbedPane();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    compileMenuItem = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    newMenuItem = new javax.swing.JMenuItem();
    openMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    cutMenuItem = new javax.swing.JMenuItem();
    copyMenuItem = new javax.swing.JMenuItem();
    pasteMenuItem = new javax.swing.JMenuItem();
    deleteMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentsMenuItem = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Text Editor");
    setPreferredSize(new java.awt.Dimension(600, 400));

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    jLabel1.setText("Status bar...");
    jToolBar1.add(jLabel1);

    getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_END);

    tabPane.setToolTipText("");
    tabPane.setFont(new java.awt.Font("Manteka", 0, 14)); // NOI18N
    tabPane.setName(""); // NOI18N
    tabPane.setOpaque(true);
    getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);

    fileMenu.setMnemonic('f');
    fileMenu.setText("File");

    compileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
    compileMenuItem.setText("Compile");
    compileMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        compileMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(compileMenuItem);
    fileMenu.add(jSeparator1);

    newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newMenuItem.setText("New");
    fileMenu.add(newMenuItem);

    openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    openMenuItem.setMnemonic('o');
    openMenuItem.setText("Open");
    openMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(openMenuItem);

    saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveMenuItem.setMnemonic('s');
    saveMenuItem.setText("Save");
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveMenuItem);

    saveAsMenuItem.setMnemonic('a');
    saveAsMenuItem.setText("Save As ...");
    saveAsMenuItem.setDisplayedMnemonicIndex(5);
    saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveAsMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveAsMenuItem);

    exitMenuItem.setMnemonic('x');
    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setMnemonic('e');
    editMenu.setText("Edit");

    cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
    cutMenuItem.setMnemonic('t');
    cutMenuItem.setText("Cut");
    editMenu.add(cutMenuItem);

    copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
    copyMenuItem.setMnemonic('y');
    copyMenuItem.setText("Copy");
    editMenu.add(copyMenuItem);

    pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
    pasteMenuItem.setMnemonic('p');
    pasteMenuItem.setText("Paste");
    editMenu.add(pasteMenuItem);

    deleteMenuItem.setMnemonic('d');
    deleteMenuItem.setText("Delete");
    editMenu.add(deleteMenuItem);

    menuBar.add(editMenu);

    helpMenu.setMnemonic('h');
    helpMenu.setText("Help");

    contentsMenuItem.setMnemonic('c');
    contentsMenuItem.setText("Contents");
    helpMenu.add(contentsMenuItem);

    aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
    aboutMenuItem.setMnemonic('a');
    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
      // TODO add your handling code here:
      int selectedIndex = getSelectedTabIndex();
      if (selectedIndex >= 0) {
        File f = getTabFile(selectedIndex);
        if (f.exists()) {
          if (f.isFile()) {
            String text = getCompText(selectedIndex);
            writeBytes(f, text);
          }
        } else {
          saveFileDialg(selectedIndex);
        }
      }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
      // TODO add your handling code here:
      int index = getSelectedTabIndex();
      File currentDir = null;
      if (index >= 0) {
        currentDir = getCurrentDir(index);
      }

      JFileChooser fc = new JFileChooser(currentDir);
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
      int ret = fc.showOpenDialog(this);
      if (ret == JFileChooser.APPROVE_OPTION) {
        File f = fc.getSelectedFile();
        openFile(f);
      }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
      // TODO add your handling code here:
      int selectedIndex = getSelectedTabIndex();
      if (selectedIndex >= 0) {
        saveFileDialg(selectedIndex);
      }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void compileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuItemActionPerformed
      // TODO add your handling code here:
      if (selectedIndex()) {
        int index = getSelectedTabIndex();
        File f = getTabFile(index);
        if (f.exists()) {
          try {
            HashMap<String, Object> compile = compiler.Compiler.compile(f.toPath());
            
            we.setErrores((LinkedList<Error>) compile.get("errores"));
            we.setVisible(true);
          } catch (Exception ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      }
    }//GEN-LAST:event_compileMenuItemActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Editor().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenuItem compileMenuItem;
  private javax.swing.JMenuItem contentsMenuItem;
  private javax.swing.JMenuItem copyMenuItem;
  private javax.swing.JMenuItem cutMenuItem;
  private javax.swing.JMenuItem deleteMenuItem;
  private javax.swing.JMenu editMenu;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem newMenuItem;
  private javax.swing.JMenuItem openMenuItem;
  private javax.swing.JMenuItem pasteMenuItem;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JTabbedPane tabPane;
  // End of variables declaration//GEN-END:variables

  Errores we = new gui.Errores(this, false);

  public Errores getWe() {
    return we;
  }
  
  
  
  
  public void openFile(File f) {

    if (f.exists() && f.isFile()) {
      ////set up components
      EditorPane ep = new EditorPane();
      final int i = tabPane.getTabCount();
      tabPane.addTab(null, ep);
      TabComp tabComp = new TabComp();
      tabComp.setOpaque(false);
      tabComp.getTitle_label().setText(f.getName());
      tabComp.getTitle_label().setToolTipText(f.getAbsolutePath());
      tabComp.getClose_button().addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent ae) {
          JPanel panel = (JPanel) ((JButton) ae.getSource()).getParent();
          JTabbedPane tabpanel = (JTabbedPane) panel.getParent().getParent();
          int index = tabpanel.indexOfTabComponent(panel);
          tabpanel.remove(index);
        }
      });
      tabPane.setTabComponentAt(i, tabComp);
      tabPane.setMnemonicAt(i, i + 48 + 1);
      tabPane.setSelectedIndex(i);


      /////////////////////////////////
      //read
      byte[] b = null;
      try {
        b = Files.readAllBytes(f.toPath());
        ep.getEditor().setText(new String(b));
      } catch (IOException ex) {
        Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
      }

      /////////////////
      if (!this.isVisible()) {
        this.pack();
//        this.setLocationRelativeTo(null);
        setVisible(true);
      }
      this.toFront();
    }
  }

  public void writeBytes(File f, String text) {
    try {
      Files.write(f.toPath(), text.getBytes());
    } catch (IOException ex) {
      Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  public boolean createFile(File ret_f) {
    try {
      return ret_f.createNewFile();
    } catch (IOException ex) {
      Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
    }
    return false;
  }

  public String getCompText(int selectedIndex) {
    EditorPane comp = (EditorPane) tabPane.getComponentAt(selectedIndex);
    String text = comp.getEditor().getText();
    return text;
  }

  public void saveFileDialg(int selectedIndex) throws HeadlessException {
    File dir = getCurrentDir(selectedIndex);

    JFileChooser fc = new JFileChooser(dir);

    int ret = fc.showSaveDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION) {
      File f = fc.getSelectedFile();
      if (createFile(f)) {
        String text = getCompText(selectedIndex);
        writeBytes(f, text);
      }
    }
  }

  public File getTabFile(int selectedIndex) {
    TabComp tabcomp = (TabComp) tabPane.getTabComponentAt(selectedIndex);
    String toolTipText = tabcomp.getTitle_label().getToolTipText();

    File f = new File((toolTipText == null ? "" : toolTipText));
    return f;
  }

  public File getCurrentDir(int selectedIndex) {
    File tabFile = getTabFile(selectedIndex);
    File dir = tabFile.getParentFile();
    return dir;
  }

  public int getSelectedTabIndex() {
    return tabPane.getSelectedIndex();
  }

  private boolean selectedIndex() {
    return (getSelectedTabIndex() >= 0 ? true : false);
  }
}
