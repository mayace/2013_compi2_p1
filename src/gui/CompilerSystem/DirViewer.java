/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.CompilerSystem;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author ce
 */
public class DirViewer extends javax.swing.JPanel {

  /**
   * Creates new form DirViewer
   */
  public DirViewer() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        list = new gui.CompilerSystem.List();
        toolbar = new javax.swing.JToolBar();
        new_button = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        add_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        openDir_button = new javax.swing.JButton();
        statusbar = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        dir_label = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel3 = new javax.swing.JLabel();
        filter_label = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jLabel5 = new javax.swing.JLabel();
        count_label = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Title", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont().deriveFont(18.0f)));
        setLayout(new java.awt.BorderLayout());

        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list);
        startDirw(getDir());

        list.getModel().addListDataListener(new  ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent lde) {
                count_label_refresh();
            }

            @Override
            public void intervalRemoved(ListDataEvent lde) {
                count_label_refresh();
            }

            @Override
            public void contentsChanged(ListDataEvent lde) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        new_button.setText("New");
        new_button.setFocusable(false);
        new_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        new_button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        new_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_buttonActionPerformed(evt);
            }
        });
        toolbar.add(new_button);
        toolbar.add(jSeparator1);

        add_button.setText("Add");
        add_button.setFocusable(false);
        add_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add_button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });
        toolbar.add(add_button);

        delete_button.setText("Delete");
        delete_button.setFocusable(false);
        delete_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delete_button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });
        toolbar.add(delete_button);
        toolbar.add(jSeparator2);

        openDir_button.setText("Open Dir");
        openDir_button.setFocusable(false);
        openDir_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openDir_button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openDir_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDir_buttonActionPerformed(evt);
            }
        });
        toolbar.add(openDir_button);

        add(toolbar, java.awt.BorderLayout.PAGE_START);

        statusbar.setFloatable(false);
        statusbar.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Dir: ");
        statusbar.add(jLabel1);

        dir_label.setText(getDir().getFileName().toString());
        dir_label.setToolTipText(getDir().toAbsolutePath().toString());
        dir_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dir_labelMouseClicked(evt);
            }
        });
        statusbar.add(dir_label);
        statusbar.add(jSeparator3);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Filter: ");
        statusbar.add(jLabel3);

        filter_label.setText(getFilter().getPattern());
        filter_label.setToolTipText(getFilter().getDescription());
        statusbar.add(filter_label);
        statusbar.add(jSeparator4);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Count: ");
        statusbar.add(jLabel5);

        count_label.setText(String.valueOf(list.getModel().getSize()));
        statusbar.add(count_label);

        add(statusbar, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void openDir_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDir_buttonActionPerformed
      // TODO add your handling code here:
      Path d = getDir();
      if (fexists(d) && Files.isDirectory(d)) {
        try {
          Desktop.getDesktop().open(d.toFile());
        } catch (IOException ex) {
          showMessageDialog(ex.toString(), ERROR_MESSAGE);
        }
      }
    }//GEN-LAST:event_openDir_buttonActionPerformed

    private void new_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_buttonActionPerformed
      JFileChooser fc = getFileChooser();
      fc.setFileFilter(new JFC_FFilter(getFilter()));
      fc.setMultiSelectionEnabled(false);
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

      int option = fc.showSaveDialog(this);
      if (option == JFileChooser.APPROVE_OPTION) {
        File f = fc.getSelectedFile();
        try {
          Files.createFile(f.toPath());
        } catch (IOException ex) {
          showMessageDialog(ex.toString(), ERROR_MESSAGE);
        }
      }

    }//GEN-LAST:event_new_buttonActionPerformed

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
      // TODO add your handling code here:
      JFileChooser fc = getFileChooser();

      fc.setFileFilter(new JFC_FFilter(getFilter()));
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
      fc.setMultiSelectionEnabled(true);

      if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        File[] fs = fc.getSelectedFiles();
        for (int i = 0; i < fs.length; i++) {
          File f = fs[i];
          Path source = f.toPath();
          Path target = FileSystems.getDefault().getPath(getDir().toString(), source.getFileName().toString());
          try {
            Files.copy(source, target);
          } catch (IOException ex) {
            showMessageDialog(ex.toString(), ERROR_MESSAGE);
          }
        }
      }


    }//GEN-LAST:event_add_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
      // TODO add your handling code here:
      final ListModel<List.Cell> model = list.getModel();

      if (model.getSize() > 0) {
        int[] index = list.getSelectedIndices();
        if (index.length == 0) {
          index = new int[]{list.getFirstVisibleIndex()};
        }

        for (int i = 0; i < index.length; i++) {
          int j = index[i];
          List.Cell cell = model.getElementAt(j);
          try {
            Files.deleteIfExists(cell.getFile());
          } catch (IOException ex) {
            showMessageDialog(ex.toString(), ERROR_MESSAGE);
          }
        }
      }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void dir_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dir_labelMouseClicked
      // TODO add your handling code here:
      JFileChooser fc = getFileChooser();
      fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      fc.setMultiSelectionEnabled(false);

      if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        File f = fc.getSelectedFile();
        setDir(f.toPath());
      }
    }//GEN-LAST:event_dir_labelMouseClicked

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
      // TODO add your handling code here:
    }//GEN-LAST:event_listMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JLabel count_label;
    private javax.swing.JButton delete_button;
    private javax.swing.JLabel dir_label;
    private javax.swing.JLabel filter_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private gui.CompilerSystem.List list;
    private javax.swing.JButton new_button;
    private javax.swing.JButton openDir_button;
    private javax.swing.JToolBar statusbar;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
  String title = "Title";
  Path dir = Paths.get("dirv");
  FFilter filter = new FFilter("*", "All Files");
  DirWatcher dirw = new DirWatcher(getDir(), getFilter(), null);

  private boolean fexists(final Path d) {
    return Files.exists(d);
  }

  private void startDirw(Path dir) throws HeadlessException {
    if (fexists(dir) && Files.isDirectory(dir)) {
      if (dirw.isAlive()) {
        dirw.interrupt();
      }
      dirw = new DirWatcher(dir, getFilter(), list.getModel(), dirw.getObservers());
      dirw.start();
    }

  }

  private JFileChooser getFileChooser() {
    // TODO add your handling code here:
    JFileChooser fchooser = new JFileChooser(getDir().toFile());
    return fchooser;
  }

  //<editor-fold defaultstate="collapsed" desc="labes_refresh">
  void count_label_refresh() {
    count_label.setText(String.valueOf(list.getModel().getSize()));

  }

  void dir_label_refres() {
    dir_label.setText(getDir().getFileName().toString());
    dir_label.setToolTipText(getDir().toAbsolutePath().toString());
  }

  void filter_label_refresh() {
    filter_label.setText(getFilter().pattern);
    filter_label.setToolTipText(getFilter().getDescription());
  }
  //</editor-fold>

  //<editor-fold defaultstate="collapsed" desc="classes">
  static public class FFilter {

    private String pattern;
    private String description;

    public FFilter(String pattern, String description) {
      this.pattern = pattern;
      this.description = description;
    }

    public String getDescription() {
      return description;
    }

    public void setDescription(String description) {
      this.description = description;
    }

    public String getPattern() {
      return pattern;
    }

    public void setPattern(String pattern) {
      this.pattern = pattern;
    }

    public String getGlobPattern() {
      return "glob:" + getPattern();
    }
  }

  class JFC_FFilter extends FileFilter {

    FFilter filter;

    public JFC_FFilter(FFilter filter) {
      this.filter = filter;
    }

    @Override
    public boolean accept(File file) {
      final String glob = "glob:" + getFilter().pattern;
      PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(glob);
      return file.isDirectory() || pathMatcher.matches(file.toPath().getFileName());
    }

    @Override
    public String getDescription() {
      return getFilter().getDescription();
    }

    public FFilter getFilter() {
      return filter;
    }

    public void setFilter(FFilter filter) {
      this.filter = filter;
    }
  }

  public interface DirWatcherObserver {

    public void overflow(List.Cell cell);

    public void create(List.Cell cell);

    public void delete(List.Cell cell);

    public void modify(List.Cell cell);
  }

  public class DirWatcher extends gui.CompilerSystem.DirWatcher {

    private FFilter filter;
    private final ListModel<List.Cell> model;
    private final HashMap<Path, List.Cell> map = new HashMap<>();
    //<editor-fold defaultstate="collapsed" desc="observer">
    public static final int OVERFLOW = 0;
    public static final int CREATE = 1;
    public static final int DELETE = 2;
    public static final int MODIFY = 3;
    private ArrayList<DirWatcherObserver> observers;

    public void addObserver(DirWatcherObserver oberver) {
      observers.add(oberver);
    }

    private void notifyObservers(final List.Cell cell, int kind) {
      //observer
      for (DirWatcherObserver observer : observers) {
        switch (kind) {
          case OVERFLOW:
            observer.overflow(cell);
            break;
          case CREATE:
            observer.create(cell);
            break;
          case DELETE:
            observer.delete(cell);
            break;
          case MODIFY:
            observer.modify(cell);
            break;
        }
      }
    }

    public void setObservers(ArrayList<DirWatcherObserver> observers) {
      this.observers = observers;
    }

    public ArrayList<DirWatcherObserver> getObservers() {
      return observers;
    }

    //</editor-fold>
    public DirWatcher(Path dir, FFilter filter, ListModel<List.Cell> model) {
      super(dir);
      this.filter = filter;
      this.model = model;
      observers = new ArrayList<>();
      init_model(model);
    }

    public DirWatcher(Path dir, FFilter filter, ListModel<List.Cell> model, ArrayList<DirWatcherObserver> observers) {
      super(dir);
      this.filter = filter;
      this.model = model;
      this.observers = observers;
      init_model(model);
    }

    public FFilter getFilter() {
      return filter;
    }

    public ListModel<List.Cell> getModel() {
      return model;
    }

    public void setFilter(FFilter filter) {
      this.filter = filter;
    }

    @Override
    public void preRun() {
      final DefaultListModel<List.Cell> m = (DefaultListModel<List.Cell>) getModel();
      m.clear();
      try {
        DirectoryStream<Path> dstrem = Files.newDirectoryStream(getDir());
        for (Path path : dstrem) {
//          final List.Cell cell = new List.Cell(path);
//          m.addElement(cell);
//          notifyObservers(cell, CREATE);
          onCreate(path);
        }
      } catch (IOException ex) {
        Logger.getLogger(DirViewer.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    @Override
    public void onOverflow(Path f) {
      System.out.println("Overflow");
      notifyObservers(null, OVERFLOW);
    }

    @Override
    public void onCreate(Path f) {
      System.out.println("Create ");

      JFC_FFilter jff = new JFC_FFilter(getFilter());
      if (jff.accept(f.toFile())) {
        final DefaultListModel<List.Cell> m = (DefaultListModel<List.Cell>) list.model;
        final List.Cell cell = new List.Cell(f);
        m.addElement(cell);
        //observers
        notifyObservers(cell, CREATE);
      }


    }

    @Override
    public void onDelete(final Path f) {
      System.out.println("Delete");

      if (map.containsKey(f)) {
        //because swing components are not thread safe so i will use EDT
        SwingWorker<Void, List.Cell> worker = new SwingWorker<Void, List.Cell>() {
          @Override
          protected Void doInBackground() throws Exception {
            List.Cell cell = map.get(f);
            publish(cell);
            return null;
          }

          @Override
          protected void process(java.util.List<List.Cell> list) {
            for (List.Cell cell : list) {
              ((DefaultListModel<List.Cell>) getModel()).removeElement(cell);
              map.remove(f);
              notifyObservers(cell, DELETE);
            }
          }
        };
        worker.execute();
      }
    }

    @Override
    public void onModify(Path f) {
      System.out.println("Modify");
      List.Cell cell = map.get(f);
      notifyObservers(cell, MODIFY);
    }

    private void init_model(ListModel<List.Cell> model) {
      if (model != null) {
        model.addListDataListener(new ListDataListener() {
          @Override
          public void intervalAdded(ListDataEvent lde) {
            final int index0 = lde.getIndex0();
            List.Cell cell = getCell(index0);
            map.put(cell.getFile(), cell);
          }

          @Override
          public void intervalRemoved(ListDataEvent lde) {
          }

          @Override
          public void contentsChanged(ListDataEvent lde) {
          }

          private List.Cell getCell(final int index0) {
            List.Cell cell = getModel().getElementAt(index0);
            return cell;
          }
        });
      }
    }
  }

  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="getter and setter">
  public Path getDir() {
    final Path d = dir;
    
    if (!fexists(d)) {
      showMessageDialog("No existe el archivo : " + d.toAbsolutePath().toString(), ERROR_MESSAGE);
      setDir(d);
    }
    return d;
  }

  public void setDir(Path dir) {
    final Path d = dir;



    final String absolute = d.toAbsolutePath().toString();
    if (!fexists(d)) {
      showMessageDialog("No existe el directorio " + absolute, WARNING_MESSAGE);
      try {
        Files.createDirectories(d);
        showMessageDialog("Directorio " + absolute + " creado...", INFORMATION_MESSAGE);
      } catch (IOException ex) {
        showMessageDialog(ex.toString(), ERROR_MESSAGE);
      }
    }

    if (!fexists(d) || Files.isRegularFile(d)) {
      showMessageDialog(absolute + " No es un directorio.", ERROR_MESSAGE);
      showMessageDialog("No se cambio el directorio...", ERROR_MESSAGE);
      return;
    }

    this.dir = d;
    dir_label_refres();
    startDirw(getDir());
  }

  public FFilter getFilter() {
    return filter;
  }

  public void setFilter(FFilter filter) {
    this.filter = filter;
    dirw.setFilter(filter);
    filter_label_refresh();
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
    ((TitledBorder) getBorder()).setTitle(title);
  }

  public List getList() {
    return list;
  }

  //prueba
  public DirWatcher getDirw() {
    return dirw;
  }
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="messages">
  public static int INFORMATION_MESSAGE = JOptionPane.INFORMATION_MESSAGE;
  public static int ERROR_MESSAGE = JOptionPane.ERROR_MESSAGE;
  public static int PLAIN_MESSAGE = JOptionPane.PLAIN_MESSAGE;
  public static int QUESTION_MESSAGE = JOptionPane.QUESTION_MESSAGE;
  public static int WARNING_MESSAGE = JOptionPane.WARNING_MESSAGE;

  public void showMessageDialog(String mensaje, int messageType) throws HeadlessException {

    String t = "Plano";

    if (messageType == ERROR_MESSAGE) {
      t = "Error";
    } else if (messageType == INFORMATION_MESSAGE) {
      t = "Información";
    } else if (messageType == QUESTION_MESSAGE) {
      t = "Pregunta";
    }

    JOptionPane.showMessageDialog(this, mensaje, t, messageType);
  }
  //</editor-fold>
}
