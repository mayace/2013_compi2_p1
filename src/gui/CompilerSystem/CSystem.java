/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.CompilerSystem;

import compiler.Error;
import gui.editor.Editor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Scanner;
import java_cup.runtime.lr_parser;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author ce
 */
public class CSystem extends javax.swing.JPanel {

  /**
   * Creates new form CSystem
   */
  public CSystem() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane2 = new javax.swing.JScrollPane();
    list1 = new gui.CompilerSystem.List();
    dirViewer = new gui.CompilerSystem.DirViewer();
    jPanel2 = new javax.swing.JPanel();
    add_button = new javax.swing.JButton();
    remove_button = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    list = new gui.CompilerSystem.List();
    filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 40));
    filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 40));

    list1.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jScrollPane2.setViewportView(list1);

    setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    add(dirViewer);
    init_dirw();

    jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

    add_button.setText("==>");
    add_button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        add_buttonActionPerformed(evt);
      }
    });
    jPanel2.add(add_button);

    remove_button.setText("<==");
    remove_button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        remove_buttonActionPerformed(evt);
      }
    });
    jPanel2.add(remove_button);

    add(jPanel2);

    jPanel1.setLayout(new java.awt.BorderLayout());

    list.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    jScrollPane1.setViewportView(list);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);
    jPanel1.add(filler6, java.awt.BorderLayout.LINE_END);
    jPanel1.add(filler2, java.awt.BorderLayout.PAGE_START);
    jPanel1.add(filler3, java.awt.BorderLayout.PAGE_END);

    add(jPanel1);
  }// </editor-fold>//GEN-END:initComponents

  private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
    final List l = dirViewer.getList();
    // TODO add your handling code here:
    if (!l.isSelectionEmpty()) {
      java.util.List<List.Cell> indices = l.getSelectedValuesList();
      for (List.Cell cell : indices) {
        addCell(cell);
      }
    }
  }//GEN-LAST:event_add_buttonActionPerformed

  private void remove_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_buttonActionPerformed
    final List l = list;
    // TODO add your handling code here:
    if (!l.isSelectionEmpty()) {
      int[] indices = l.getSelectedIndices();
      for (int i : indices) {
        final int selectedIndex = l.getSelectedIndex();
        ((DefaultListModel<List.Cell>) l.getModel()).remove(selectedIndex);
      }
    }
  }//GEN-LAST:event_remove_buttonActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  public javax.swing.JButton add_button;
  public gui.CompilerSystem.DirViewer dirViewer;
  public javax.swing.Box.Filler filler2;
  public javax.swing.Box.Filler filler3;
  public javax.swing.Box.Filler filler6;
  public javax.swing.JPanel jPanel1;
  public javax.swing.JPanel jPanel2;
  public javax.swing.JScrollPane jScrollPane1;
  public javax.swing.JScrollPane jScrollPane2;
  public gui.CompilerSystem.List list;
  public gui.CompilerSystem.List list1;
  public javax.swing.JButton remove_button;
  // End of variables declaration//GEN-END:variables
  LinkedHashSet<List.Cell> set = new LinkedHashSet<>();
  

  void init_dirw() {

    final List l = dirViewer.getList();


    l.addMouseListener(new MouseAdapter() {
      @Override
      public void mouseClicked(MouseEvent evt) {
        int clickCount = evt.getClickCount();
        if (clickCount == 2) {
          int button = evt.getButton();
          final List l = dirViewer.getList();
          int index = l.locationToIndex(evt.getPoint());

          if (index >= 0) {
            List.Cell cell = l.getModel().getElementAt(index);

            if (button == MouseEvent.BUTTON1) {
              getEditor().openFile(cell.getFile().toFile());
            } else if (button == MouseEvent.BUTTON3) {
              addCell(cell);
            }
          }

        }
      }
    });
    dirViewer.getDirw().addObserver(new DirViewer.DirWatcherObserver() {
      @Override
      public void overflow(List.Cell cell) {
      }

      @Override
      public void create(List.Cell cell) {
        compile(cell);
      }

      @Override
      public void delete(List.Cell cell) {
        checkInSet(cell);
      }

      @Override
      public void modify(List.Cell cell) {
        compile(cell);
      }

      private void compile(List.Cell cell) {
        try {
          final HashMap<String, Object> compile = compiler.Compiler.compile(cell.getFile());
          cell.setValue(compile);
          LinkedList<Error> errors = (LinkedList<Error>) compile.get("errores");
          if (errors == null) {
            cell.setOk(null);
            checkInSet(cell);
          } else {
            if (errors.isEmpty()) {
              cell.setOk(true);
            } else {
              cell.setOk(false);
              checkInSet(cell);
            }
          }
        } catch (Exception ex) {
          Logger.getLogger(CSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
      }

      private void checkInSet(List.Cell cell) {
        if (set.contains(cell)) {
          removeCell(cell);
        }
      }
    });

  }

  private void addCell(List.Cell cell) {
    final Boolean ok = cell.getOk();
    if (ok != null) {
      if (ok) {
        if (!set.contains(cell)) {
          getModelList().addElement(cell);
          set.add(cell);
        }
      } else {
        final String msg = "Tiene errores";
        error(msg);
      }

    } else {
      final String msg = "No se puede compilar..." + cell.getFile();
      error(msg);
    }
  }

  private void removeCell(List.Cell cell) {
    if (cell != null) {
      getModelList().removeElement(cell);
      set.remove(cell);
    }
  }
  //<editor-fold defaultstate="collapsed" desc="editor">
  Editor editor = null;

  private void init_editor() {
    editor = new Editor();
    editor.setLocationRelativeTo(this);
    editor.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  }

  public Editor getEditor() {
    if (editor == null) {
      init_editor();
    }
    return editor;
  }
  //</editor-fold>

  private void error(final String msg) {
    System.err.println(msg);
  }

  private DefaultListModel<List.Cell> getModelList() {
    return (DefaultListModel<List.Cell>) list.getModel();
  }

  public LinkedHashSet<List.Cell> getSet() {
    return set;
  }
}
