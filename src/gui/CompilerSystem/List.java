/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.CompilerSystem;

import java.awt.Color;
import java.awt.Component;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;

/**
 *
 * @author ce
 */
public class List extends JList<List.Cell> {

  /**
   * Creates new form List
   */
  public List() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setModel(model);
        setCellRenderer(new List.CellRender());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
  //<editor-fold defaultstate="collapsed" desc="fix cast problem with the initial string list default values of the model, from the gui builder">
  ListModel<List.Cell> model = new DefaultListModel<>();

//    @Override
//    public DefaultListModel<List.Cell> getModel(){
////        System.out.println(model);
//        return  (DefaultListModel<List.Cell>) model;
//    }
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="sub classes">
  public static class Cell {

    Path file;
    Boolean ok = null;
    Object value = null;

    public void setValue(Object value) {
      this.value = value;
    }

    public Object getValue() {
      return value;
    }

    public Cell(Path file) {
      this.file = file;
    }

    public Boolean getOk() {
      return ok;
    }

    public Path getFile() {
      return file;
    }

    public void setOk(Boolean ok) {
      this.ok = ok;
    }

    public void setFile(Path file) {
      this.file = file;
    }
  }

  class CellRender extends JPanel implements ListCellRenderer<List.Cell> {

    JLabel label1 = new JLabel();
    JLabel label2 = new JLabel();

    public CellRender() {
      setLayout(new BoxLayout(this, BoxLayout.LINE_AXIS));
      add(label1);
      add(label2);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Cell> jlist, Cell cell, int i, boolean isSelected, boolean cellHasFocus) {

      if (isSelected) {
        Color bg = jlist.getSelectionBackground();
        Color fg = jlist.getSelectionForeground();
        setBackground(bg);
        setForeground(fg);
      } else {
        Color bg = jlist.getBackground();
        Color fg = jlist.getForeground();
        setBackground(bg);
        setBackground(fg);
      }


      fileConfigs(cell);

      return this;
    }

    private void checkOk(List.Cell e) {
      final Boolean ok = e.getOk();
      if (ok == null) {
        label1.setIcon(null);
      } else {
        if (ok) {
          label1.setIcon(new ImageIcon("ext/success.png"));
        } else {
          label1.setIcon(new ImageIcon("ext/error.png"));
        }
      }
    }

    private void fileConfigs(List.Cell cell) {
      final Path file = cell.getFile();

      if (file != null) {
        setToolTipText(file.toString());
        label2.setText(file.getFileName().toString());

        if (Files.exists(file)) {
          if (Files.isRegularFile(file)) {
            label2.setIcon(new ImageIcon("ext/text-x-source.png"));
          } else {
            label2.setIcon(new ImageIcon("ext/folder.png"));
          }
          checkOk(cell);
        }
      }
    }
  }
  //</editor-fold>
  //</editor-fold>
  //</editor-fold>
  //</editor-fold>
}
