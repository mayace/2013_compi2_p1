/* The following code was generated by JFlex 1.4.3 on 3/26/13 12:16 AM */

package compiler.lvl;
import java_cup.runtime.Symbol;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/26/13 12:16 AM from the specification file
 * <tt>s.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\3\16\0\1\24\12\4"+
    "\2\0\1\16\1\0\1\23\4\0\1\43\1\0\1\25\1\36\2\0"+
    "\1\17\4\0\1\32\1\0\1\34\3\0\1\40\3\0\1\41\1\42"+
    "\5\0\1\44\1\0\1\11\1\33\1\26\1\10\1\6\1\13\1\35"+
    "\1\0\1\27\1\45\1\0\1\14\1\20\1\31\1\12\1\21\1\0"+
    "\1\7\1\15\1\22\1\37\1\5\1\0\1\30\uff87\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\1\3\2\1\2\4\2\1\16\0\2\1"+
    "\35\0\1\5\1\6\1\0\2\1\25\0\1\7\1\10"+
    "\17\0\1\1\1\11\43\0\1\12\3\0\1\1\1\13"+
    "\24\0\1\14\11\0\1\15\5\0\1\16\1\0\1\1"+
    "\3\0\1\17\1\20\12\0\1\21\5\0\1\22\11\0"+
    "\1\23\3\0\1\24\1\0\1\25\3\0\1\26\10\0"+
    "\1\27\12\0\1\30\1\0\1\31\2\0\1\32\1\0"+
    "\1\33\7\0\1\34\1\0\1\35\3\0\1\36\2\0"+
    "\1\37\2\0\1\40\1\41\1\42\3\0\1\43\2\0"+
    "\1\44\2\0\1\45\1\46\1\47\1\50\1\0\1\51"+
    "\2\0\1\52\1\53\1\54\1\0\1\55\10\0\1\56"+
    "\2\0\1\57\17\0\1\60\1\0\1\61\4\0\1\62"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\114\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4"+
    "\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\114\0\114\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\114\0\114\0\u0bba\0\u0be0\0\u0c06\0\u0c2c"+
    "\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c"+
    "\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\46\0\u0e1a\0\u0e40\0\u0e66"+
    "\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6"+
    "\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6"+
    "\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326"+
    "\0\114\0\u134c\0\u1372\0\u1398\0\u13be\0\114\0\u13e4\0\u140a"+
    "\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a"+
    "\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a"+
    "\0\u1690\0\u16b6\0\114\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774"+
    "\0\u179a\0\u17c0\0\u17e6\0\u180c\0\114\0\u1832\0\u1858\0\u187e"+
    "\0\u18a4\0\u18ca\0\114\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988"+
    "\0\114\0\114\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c"+
    "\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\114\0\u1b2a\0\u1b50\0\u1b76"+
    "\0\u1b9c\0\u1bc2\0\114\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80"+
    "\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\114\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\114\0\u1db0\0\114\0\u1dd6\0\u1dfc\0\u1e22\0\114\0\u1e48"+
    "\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\114"+
    "\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082"+
    "\0\u20a8\0\u20ce\0\114\0\u20f4\0\114\0\u211a\0\u2140\0\114"+
    "\0\u2166\0\114\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a"+
    "\0\u2270\0\114\0\u2296\0\114\0\u22bc\0\u22e2\0\u2308\0\114"+
    "\0\u232e\0\u2354\0\114\0\u237a\0\u23a0\0\114\0\114\0\114"+
    "\0\u23c6\0\u23ec\0\u2412\0\114\0\u2438\0\u245e\0\114\0\u2484"+
    "\0\u24aa\0\114\0\114\0\114\0\114\0\u24d0\0\114\0\u24f6"+
    "\0\u251c\0\114\0\114\0\114\0\u2542\0\114\0\u2568\0\u258e"+
    "\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672\0\114\0\u2698"+
    "\0\u26be\0\114\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2"+
    "\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2"+
    "\0\u28f8\0\114\0\u291e\0\114\0\u2944\0\u296a\0\u2990\0\u29b6"+
    "\0\114\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\5\2\1\7"+
    "\2\2\1\10\4\2\1\11\23\2\3\0\12\2\1\0"+
    "\4\2\1\0\22\2\47\0\1\3\44\0\1\2\3\0"+
    "\1\5\11\2\1\0\4\2\1\0\23\2\3\0\2\2"+
    "\1\12\7\2\1\0\4\2\1\0\23\2\3\0\5\2"+
    "\1\13\4\2\1\0\4\2\1\0\22\2\10\0\1\14"+
    "\6\0\1\15\1\16\3\0\1\17\1\20\1\21\1\22"+
    "\2\0\1\23\1\0\1\24\1\0\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\2\0\1\2\3\0\3\2\1\32"+
    "\6\2\1\0\4\2\1\0\23\2\3\0\10\2\1\33"+
    "\1\2\1\0\4\2\1\0\22\2\11\0\1\34\54\0"+
    "\1\35\10\0\1\36\25\0\1\37\44\0\1\40\6\0"+
    "\1\41\1\42\4\0\1\43\1\44\1\45\2\0\1\46"+
    "\1\0\1\47\1\0\1\50\1\0\1\51\1\52\1\53"+
    "\1\54\17\0\1\55\12\0\1\56\1\57\25\0\1\60"+
    "\25\0\1\61\37\0\1\62\26\0\1\63\14\0\1\64"+
    "\27\0\1\65\63\0\1\66\27\0\1\67\15\0\1\70"+
    "\41\0\1\71\45\0\1\72\33\0\1\73\34\0\1\2"+
    "\3\0\4\2\1\74\5\2\1\0\4\2\1\0\23\2"+
    "\3\0\11\2\1\75\1\0\4\2\1\0\22\2\31\0"+
    "\1\76\25\0\1\77\7\0\1\100\53\0\1\101\53\0"+
    "\1\102\21\0\1\103\54\0\1\104\10\0\1\105\25\0"+
    "\1\106\51\0\1\107\12\0\1\110\1\111\25\0\1\112"+
    "\25\0\1\113\37\0\1\114\26\0\1\115\14\0\1\116"+
    "\27\0\1\117\63\0\1\120\27\0\1\121\15\0\1\122"+
    "\41\0\1\123\45\0\1\124\33\0\1\125\55\0\1\126"+
    "\1\127\45\0\1\130\31\0\1\131\54\0\1\132\37\0"+
    "\1\133\43\0\1\134\60\0\1\135\32\0\1\136\55\0"+
    "\1\137\61\0\1\140\34\0\1\141\46\0\1\142\41\0"+
    "\1\143\30\0\1\2\3\0\5\2\1\144\4\2\1\0"+
    "\4\2\1\0\23\2\3\0\6\2\1\145\3\2\1\0"+
    "\4\2\1\0\22\2\12\0\1\146\70\0\1\147\22\0"+
    "\1\150\61\0\1\151\46\0\1\152\47\0\1\153\25\0"+
    "\1\154\7\0\1\155\53\0\1\156\53\0\1\157\31\0"+
    "\1\160\1\161\45\0\1\162\31\0\1\163\54\0\1\164"+
    "\37\0\1\165\43\0\1\166\60\0\1\167\32\0\1\170"+
    "\55\0\1\171\61\0\1\172\34\0\1\173\46\0\1\174"+
    "\41\0\1\175\36\0\1\176\2\0\1\177\43\0\1\200"+
    "\65\0\1\201\36\0\1\202\54\0\1\203\27\0\1\204"+
    "\42\0\1\205\72\0\1\206\20\0\1\207\50\0\1\210"+
    "\57\0\1\211\33\0\1\212\46\0\1\213\62\0\1\214"+
    "\16\0\1\2\3\0\4\2\1\215\5\2\1\0\4\2"+
    "\1\0\22\2\23\0\1\216\30\0\1\217\46\0\1\220"+
    "\65\0\1\221\27\0\1\222\46\0\1\223\70\0\1\224"+
    "\22\0\1\225\61\0\1\226\46\0\1\227\24\0\1\230"+
    "\2\0\1\231\43\0\1\232\65\0\1\233\36\0\1\234"+
    "\54\0\1\235\27\0\1\236\42\0\1\237\72\0\1\240"+
    "\20\0\1\241\50\0\1\242\57\0\1\243\33\0\1\244"+
    "\46\0\1\245\62\0\1\246\44\0\1\247\45\0\1\250"+
    "\56\0\1\251\14\0\1\252\66\0\1\253\32\0\1\254"+
    "\54\0\1\255\53\0\1\256\23\0\1\257\52\0\1\260"+
    "\64\0\1\261\43\0\1\262\37\0\1\263\36\0\1\264"+
    "\31\0\1\2\3\0\2\2\1\265\7\2\1\0\4\2"+
    "\1\0\22\2\31\0\1\266\36\0\1\267\35\0\1\270"+
    "\56\0\1\271\45\0\1\272\30\0\1\273\46\0\1\274"+
    "\65\0\1\275\27\0\1\276\62\0\1\277\45\0\1\300"+
    "\56\0\1\301\14\0\1\302\66\0\1\303\32\0\1\304"+
    "\54\0\1\305\53\0\1\306\23\0\1\307\52\0\1\310"+
    "\64\0\1\311\43\0\1\312\37\0\1\313\36\0\1\314"+
    "\60\0\1\315\45\0\1\316\44\0\1\317\50\0\1\320"+
    "\51\0\1\321\24\0\1\322\57\0\1\323\25\0\1\324"+
    "\62\0\1\325\36\0\1\326\43\0\1\327\47\0\1\330"+
    "\31\0\1\2\3\0\3\2\1\75\6\2\1\0\4\2"+
    "\1\0\22\2\23\0\1\331\33\0\1\332\57\0\1\333"+
    "\53\0\1\334\36\0\1\335\35\0\1\336\56\0\1\337"+
    "\51\0\1\340\45\0\1\341\44\0\1\342\50\0\1\343"+
    "\51\0\1\344\24\0\1\345\57\0\1\346\25\0\1\347"+
    "\62\0\1\350\36\0\1\351\43\0\1\352\47\0\1\353"+
    "\42\0\1\354\46\0\1\355\55\0\1\356\33\0\1\357"+
    "\47\0\1\360\44\0\1\361\63\0\1\362\41\0\1\363"+
    "\30\0\1\364\62\0\1\365\33\0\1\366\43\0\1\367"+
    "\61\0\1\370\33\0\1\371\57\0\1\372\33\0\1\373"+
    "\46\0\1\374\55\0\1\375\33\0\1\376\47\0\1\377"+
    "\44\0\1\u0100\63\0\1\u0101\41\0\1\u0102\30\0\1\u0103"+
    "\62\0\1\u0104\33\0\1\u0105\50\0\1\u0106\46\0\1\u0107"+
    "\5\0\1\u0108\61\0\1\u0109\14\0\1\u010a\62\0\1\u010b"+
    "\66\0\1\u010c\34\0\1\u010d\35\0\1\u010e\45\0\1\u010f"+
    "\45\0\1\u0110\31\0\1\u0111\52\0\1\u0112\46\0\1\u0113"+
    "\5\0\1\u0114\61\0\1\u0115\14\0\1\u0116\62\0\1\u0117"+
    "\66\0\1\u0118\34\0\1\u0119\35\0\1\u011a\45\0\1\u011b"+
    "\45\0\1\u011c\45\0\1\u011d\31\0\1\u011e\61\0\1\u011f"+
    "\43\0\1\u0120\53\0\1\u0121\41\0\1\u0122\45\0\1\u0123"+
    "\45\0\1\u0124\31\0\1\u0125\61\0\1\u0126\43\0\1\u0127"+
    "\53\0\1\u0128\27\0\1\u0129\42\0\1\u012a\53\0\1\u012b"+
    "\42\0\1\u012c\42\0\1\u012d\53\0\1\u012e\54\0\1\u012f"+
    "\31\0\1\u0130\65\0\1\u0131\41\0\1\u0132\31\0\1\u0133"+
    "\65\0\1\u0134\33\0\1\u0135\40\0\1\u0136\52\0\1\u0137"+
    "\40\0\1\u0138\47\0\1\u0139\44\0\1\u013a\46\0\1\u013b"+
    "\44\0\1\u013c\65\0\1\u013d\24\0\1\u013e\66\0\1\u013f"+
    "\24\0\1\u0140\46\0\1\u0141\57\0\1\u0142\33\0\1\u0143"+
    "\57\0\1\u0144\67\0\1\u0145\45\0\1\u0146\6\0\1\u0147"+
    "\45\0\1\u0148\62\0\1\u0149\45\0\1\u014a\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\5\1\1\11\2\1\16\0\2\1\35\0"+
    "\2\11\1\0\2\1\25\0\2\11\17\0\2\1\43\0"+
    "\1\11\3\0\1\1\1\11\24\0\1\11\11\0\1\11"+
    "\5\0\1\11\1\0\1\1\3\0\2\11\12\0\1\11"+
    "\5\0\1\11\11\0\1\11\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\10\0\1\11\12\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\7\0\1\11\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\2\0\3\11\3\0\1\11"+
    "\2\0\1\11\2\0\4\11\1\0\1\11\2\0\3\11"+
    "\1\0\1\11\10\0\1\11\2\0\1\11\17\0\1\11"+
    "\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public LinkedList<compiler.Error> errors=new LinkedList<>();
	private void error(String message) {
		
		Symbol sym=new Symbol(Sym.error, yyline, yycolumn, yytext());
		compiler.Error e=new compiler.Error(message,sym,compiler.Error.Type.LEXIC);
	}
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn,yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return symbol(Sym.ESTRUCTURA_TAG1);
          }
        case 52: break;
        case 43: 
          { return symbol(Sym.ESPECIAL_TAG2);
          }
        case 53: break;
        case 6: 
          { return symbol(Sym.Y_TAG1);
          }
        case 54: break;
        case 38: 
          { return symbol(Sym.CASILLA_TAG2);
          }
        case 55: break;
        case 25: 
          { return symbol(Sym.TAMANIO_TAG1);
          }
        case 56: break;
        case 49: 
          { return symbol(Sym.INVENCIBLE_TAG2);
          }
        case 57: break;
        case 30: 
          { return symbol(Sym.ESPACIO_TAG1);
          }
        case 58: break;
        case 16: 
          { return symbol(Sym.DANIO_TAG2);
          }
        case 59: break;
        case 39: 
          { return symbol(Sym.ESPECIAL_TAG1);
          }
        case 60: break;
        case 33: 
          { return symbol(Sym.CASILLA_TAG1);
          }
        case 61: break;
        case 1: 
          { return symbol(Sym.ANY);
          }
        case 62: break;
        case 36: 
          { return symbol(Sym.ENEMIGO_TAG2);
          }
        case 63: break;
        case 48: 
          { return symbol(Sym.INVENCIBLE_TAG1);
          }
        case 64: break;
        case 11: 
          { return symbol(Sym.DANIO_TAG1);
          }
        case 65: break;
        case 45: 
          { return symbol(Sym.EXTIENDE_TAG2);
          }
        case 66: break;
        case 37: 
          { return symbol(Sym.PASABLE_TAG2);
          }
        case 67: break;
        case 4: 
          { error("Illegal character.");
          }
        case 68: break;
        case 31: 
          { return symbol(Sym.ENEMIGO_TAG1);
          }
        case 69: break;
        case 9: 
          { return symbol(Sym.BOOLEAN);
          }
        case 70: break;
        case 41: 
          { return symbol(Sym.EXTIENDE_TAG1);
          }
        case 71: break;
        case 44: 
          { return symbol(Sym.ESPACIOS_TAG2);
          }
        case 72: break;
        case 32: 
          { return symbol(Sym.PASABLE_TAG1);
          }
        case 73: break;
        case 28: 
          { return symbol(Sym.NOMBRE_TAG2);
          }
        case 74: break;
        case 22: 
          { return symbol(Sym.MAGIA_TAG2);
          }
        case 75: break;
        case 40: 
          { return symbol(Sym.ESPACIOS_TAG1);
          }
        case 76: break;
        case 24: 
          { return symbol(Sym.NOMBRE_TAG1);
          }
        case 77: break;
        case 15: 
          { return symbol(Sym.MAGIA_TAG1);
          }
        case 78: break;
        case 17: 
          { return symbol(Sym.CURA_TAG2);
          }
        case 79: break;
        case 3: 
          { return symbol(Sym.INT);
          }
        case 80: break;
        case 13: 
          { return symbol(Sym.CURA_TAG1);
          }
        case 81: break;
        case 12: 
          { return symbol(Sym.FIN_TAG2);
          }
        case 82: break;
        case 18: 
          { return symbol(Sym.TIPO_TAG2);
          }
        case 83: break;
        case 23: 
          { return symbol(Sym.NIVEL_TAG2);
          }
        case 84: break;
        case 27: 
          { return symbol(Sym.INICIO_TAG2);
          }
        case 85: break;
        case 10: 
          { return symbol(Sym.FIN_TAG1);
          }
        case 86: break;
        case 26: 
          { return symbol(Sym.IMAGEN_TAG2);
          }
        case 87: break;
        case 42: 
          { return symbol(Sym.IMPORTAR_TAG2);
          }
        case 88: break;
        case 7: 
          { return symbol(Sym.X_TAG2);
          }
        case 89: break;
        case 14: 
          { return symbol(Sym.TIPO_TAG1);
          }
        case 90: break;
        case 19: 
          { return symbol(Sym.NIVEL_TAG1);
          }
        case 91: break;
        case 51: 
          { return symbol(Sym.PERSONAJE_TAG2);
          }
        case 92: break;
        case 21: 
          { return symbol(Sym.INICIO_TAG1);
          }
        case 93: break;
        case 20: 
          { return symbol(Sym.IMAGEN_TAG1);
          }
        case 94: break;
        case 34: 
          { return symbol(Sym.IMPORTAR_TAG1);
          }
        case 95: break;
        case 47: 
          { return symbol(Sym.ESTRUCTURA_TAG2);
          }
        case 96: break;
        case 8: 
          { return symbol(Sym.Y_TAG2);
          }
        case 97: break;
        case 5: 
          { return symbol(Sym.X_TAG1);
          }
        case 98: break;
        case 29: 
          { return symbol(Sym.TAMANIO_TAG2);
          }
        case 99: break;
        case 50: 
          { return symbol(Sym.PERSONAJE_TAG1);
          }
        case 100: break;
        case 2: 
          { 
          }
        case 101: break;
        case 35: 
          { return symbol(Sym.ESPACIO_TAG2);
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
