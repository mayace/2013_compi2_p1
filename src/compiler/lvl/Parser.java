
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 25 23:46:15 CST 2013
//----------------------------------------------------

package compiler.lvl;

import compiler.Attr;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 25 23:46:15 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\011\002\000\002\007\005\000\002" +
    "\012\003\000\002\012\002\000\002\016\004\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\030\005" +
    "\000\002\031\003\000\002\031\002\000\002\032\004\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\020\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\002\000\002\021\005\000\002\035\003\000\002" +
    "\035\003\000\002\035\002\000\002\025\005\000\002\040" +
    "\003\000\002\040\003\000\002\040\002\000\002\027\005" +
    "\000\002\041\003\000\002\041\002\000\002\044\004\000" +
    "\002\044\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\005\000\002\047\003\000\002\047\003\000\002\047\002" +
    "\000\002\050\005\000\002\051\003\000\002\051\003\000" +
    "\002\051\002\000\002\052\005\000\002\053\003\000\002" +
    "\053\003\000\002\053\002\000\002\054\005\000\002\055" +
    "\003\000\002\055\003\000\002\055\002\000\002\026\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\002\000" +
    "\002\024\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\002\000\002\022\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\002\000\002\023\005\000\002\037\003" +
    "\000\002\037\003\000\002\037\002\000\002\010\005\000" +
    "\002\013\004\000\002\013\004\000\002\013\002\000\002" +
    "\072\004\000\002\072\004\000\002\073\003\000\002\073" +
    "\003\000\002\056\005\000\002\100\003\000\002\100\003" +
    "\000\002\100\002\000\002\014\003\000\002\057\005\000" +
    "\002\060\003\000\002\060\002\000\002\061\004\000\002" +
    "\061\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\063\005\000\002\064\005\000\002\101\003" +
    "\000\002\101\003\000\002\101\002\000\002\015\003\000" +
    "\002\065\005\000\002\066\003\000\002\066\002\000\002" +
    "\067\004\000\002\067\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\074\005\000\002\077\003" +
    "\000\002\077\002\000\002\075\004\000\002\075\003\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\071\005\000\002\102\003\000\002\102" +
    "\003\000\002\102\002\000\002\103\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\010\003\006\004\007\006\004\001\002\000" +
    "\010\003\126\007\ufff4\012\132\001\002\000\004\002\001" +
    "\001\002\000\010\003\123\006\004\010\021\001\002\000" +
    "\004\005\ufff7\001\002\000\006\003\017\010\021\001\002" +
    "\000\004\002\ufffd\001\002\000\006\003\015\006\004\001" +
    "\002\000\004\002\014\001\002\000\004\002\000\001\002" +
    "\000\006\003\017\010\021\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufff9\001\002\000\004\002\ufffb\001\002" +
    "\000\010\003\025\011\uffa8\014\024\001\002\000\004\002" +
    "\ufffa\001\002\000\006\003\uffa5\047\uffa5\001\002\000\010" +
    "\003\114\015\uffa0\045\067\001\002\000\006\003\uffa4\047" +
    "\uffa4\001\002\000\006\003\101\047\102\001\002\000\006" +
    "\003\032\055\033\001\002\000\004\011\031\001\002\000" +
    "\004\002\uffab\001\002\000\004\011\uffa9\001\002\000\012" +
    "\003\040\056\uff8e\057\036\063\044\001\002\000\004\011" +
    "\uffaa\001\002\000\012\003\uff8b\056\uff8b\057\uff8b\063\uff8b" +
    "\001\002\000\014\003\061\051\054\053\057\060\uff86\061" +
    "\065\001\002\000\004\056\053\001\002\000\012\003\uff89" +
    "\056\uff89\057\uff89\063\uff89\001\002\000\012\003\uff8a\056" +
    "\uff8a\057\uff8a\063\uff8a\001\002\000\012\003\uff8c\056\uff8c" +
    "\057\uff8c\063\uff8c\001\002\000\012\003\040\056\uff8f\057" +
    "\036\063\044\001\002\000\010\003\046\046\050\064\uff92" +
    "\001\002\000\010\052\uff94\054\uff94\064\uff94\001\002\000" +
    "\010\052\uff93\054\uff93\064\uff93\001\002\000\004\064\051" +
    "\001\002\000\010\052\uff91\054\uff91\064\uff91\001\002\000" +
    "\012\003\uff7b\056\uff7b\057\uff7b\063\uff7b\001\002\000\012" +
    "\003\uff8d\056\uff8d\057\uff8d\063\uff8d\001\002\000\004\011" +
    "\uff90\001\002\000\010\003\046\046\050\052\uff92\001\002" +
    "\000\004\060\076\001\002\000\014\003\061\051\054\053" +
    "\057\060\uff87\061\065\001\002\000\010\003\046\046\050" +
    "\054\uff92\001\002\000\014\003\uff84\051\uff84\053\uff84\060" +
    "\uff84\061\uff84\001\002\000\014\003\uff80\051\uff80\053\uff80" +
    "\060\uff80\061\uff80\001\002\000\014\003\uff81\051\uff81\053" +
    "\uff81\060\uff81\061\uff81\001\002\000\014\003\uff82\051\uff82" +
    "\053\uff82\060\uff82\061\uff82\001\002\000\014\003\uff83\051" +
    "\uff83\053\uff83\060\uff83\061\uff83\001\002\000\010\003\066" +
    "\045\067\062\uff7c\001\002\000\004\062\uff7d\001\002\000" +
    "\006\015\uff9f\062\uff9f\001\002\000\004\062\072\001\002" +
    "\000\004\062\uff7e\001\002\000\014\003\uff7f\051\uff7f\053" +
    "\uff7f\060\uff7f\061\uff7f\001\002\000\004\054\074\001\002" +
    "\000\016\003\uff95\050\uff95\051\uff95\053\uff95\060\uff95\061" +
    "\uff95\001\002\000\014\003\uff85\051\uff85\053\uff85\060\uff85" +
    "\061\uff85\001\002\000\012\003\uff88\056\uff88\057\uff88\063" +
    "\uff88\001\002\000\004\052\100\001\002\000\016\003\uff96" +
    "\050\uff96\051\uff96\053\uff96\060\uff96\061\uff96\001\002\000" +
    "\006\003\uffa6\055\uffa6\001\002\000\012\003\110\050\uff9c" +
    "\051\054\053\057\001\002\000\006\003\uffa7\055\uffa7\001" +
    "\002\000\012\003\uff98\050\uff98\051\uff98\053\uff98\001\002" +
    "\000\012\003\uff9a\050\uff9a\051\uff9a\053\uff9a\001\002\000" +
    "\012\003\uff99\050\uff99\051\uff99\053\uff99\001\002\000\012" +
    "\003\110\050\uff9d\051\054\053\057\001\002\000\012\003" +
    "\uff97\050\uff97\051\uff97\053\uff97\001\002\000\004\050\112" +
    "\001\002\000\006\003\uff9e\055\uff9e\001\002\000\012\003" +
    "\uff9b\050\uff9b\051\uff9b\053\uff9b\001\002\000\004\015\uffa1" +
    "\001\002\000\004\015\uffa2\001\002\000\004\015\117\001" +
    "\002\000\006\003\uffa3\047\uffa3\001\002\000\004\002\ufffc" +
    "\001\002\000\004\005\122\001\002\000\006\003\ufff8\006" +
    "\ufff8\001\002\000\010\002\ufff9\003\017\010\021\001\002" +
    "\000\004\002\ufffe\001\002\000\004\007\254\001\002\000" +
    "\010\003\ufff0\007\ufff0\012\ufff0\001\002\000\010\003\ufff1" +
    "\007\ufff1\012\ufff1\001\002\000\010\003\ufff2\007\ufff2\012" +
    "\ufff2\001\002\000\010\003\126\007\ufff5\012\132\001\002" +
    "\000\026\003\146\013\uffed\014\135\016\151\020\140\022" +
    "\137\024\136\026\145\030\153\032\150\001\002\000\026" +
    "\003\uffe6\013\uffe6\014\uffe6\016\uffe6\020\uffe6\022\uffe6\024" +
    "\uffe6\026\uffe6\030\uffe6\032\uffe6\001\002\000\026\003\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\020\uffe3\022\uffe3\024\uffe3\026" +
    "\uffe3\030\uffe3\032\uffe3\001\002\000\010\003\250\015\uffda" +
    "\045\251\001\002\000\010\003\243\025\uffac\044\245\001" +
    "\002\000\010\003\237\023\uffb0\044\241\001\002\000\010" +
    "\003\234\021\uffb8\044\235\001\002\000\026\003\uffe8\013" +
    "\uffe8\014\uffe8\016\uffe8\020\uffe8\022\uffe8\024\uffe8\026\uffe8" +
    "\030\uffe8\032\uffe8\001\002\000\004\013\232\001\002\000" +
    "\026\003\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\022\uffe4" +
    "\024\uffe4\026\uffe4\030\uffe4\032\uffe4\001\002\000\026\003" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\022\uffe9\024\uffe9" +
    "\026\uffe9\030\uffe9\032\uffe9\001\002\000\010\003\226\027" +
    "\uffb4\044\230\001\002\000\026\003\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\020\uffe2\022\uffe2\024\uffe2\026\uffe2\030\uffe2\032" +
    "\uffe2\001\002\000\026\003\uffe5\013\uffe5\014\uffe5\016\uffe5" +
    "\020\uffe5\022\uffe5\024\uffe5\026\uffe5\030\uffe5\032\uffe5\001" +
    "\002\000\010\003\222\033\uffd6\045\223\001\002\000\016" +
    "\003\173\017\uffd3\034\177\036\165\040\170\042\176\001" +
    "\002\000\026\003\uffea\013\uffea\014\uffea\016\uffea\020\uffea" +
    "\022\uffea\024\uffea\026\uffea\030\uffea\032\uffea\001\002\000" +
    "\010\003\160\031\uffde\045\161\001\002\000\026\003\146" +
    "\013\uffee\014\135\016\151\020\140\022\137\024\136\026" +
    "\145\030\153\032\150\001\002\000\026\003\uffeb\013\uffeb" +
    "\014\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb\026\uffeb\030" +
    "\uffeb\032\uffeb\001\002\000\026\003\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\020\uffe7\022\uffe7\024\uffe7\026\uffe7\030\uffe7\032" +
    "\uffe7\001\002\000\026\003\uffec\013\uffec\014\uffec\016\uffec" +
    "\020\uffec\022\uffec\024\uffec\026\uffec\030\uffec\032\uffec\001" +
    "\002\000\004\031\uffdf\001\002\000\004\031\uffe0\001\002" +
    "\000\004\031\163\001\002\000\026\003\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\020\uffe1\022\uffe1\024\uffe1\026\uffe1\030\uffe1" +
    "\032\uffe1\001\002\000\016\003\uffd0\017\uffd0\034\uffd0\036" +
    "\uffd0\040\uffd0\042\uffd0\001\002\000\010\003\216\037\uffc4" +
    "\046\220\001\002\000\004\017\215\001\002\000\016\003" +
    "\173\017\uffd4\034\177\036\165\040\170\042\176\001\002" +
    "\000\010\003\211\041\uffc0\046\212\001\002\000\016\003" +
    "\uffcf\017\uffcf\034\uffcf\036\uffcf\040\uffcf\042\uffcf\001\002" +
    "\000\016\003\uffce\017\uffce\034\uffce\036\uffce\040\uffce\042" +
    "\uffce\001\002\000\016\003\uffcc\017\uffcc\034\uffcc\036\uffcc" +
    "\040\uffcc\042\uffcc\001\002\000\016\003\uffcd\017\uffcd\034" +
    "\uffcd\036\uffcd\040\uffcd\042\uffcd\001\002\000\016\003\uffd1" +
    "\017\uffd1\034\uffd1\036\uffd1\040\uffd1\042\uffd1\001\002\000" +
    "\010\003\204\043\uffbc\046\206\001\002\000\010\003\201" +
    "\035\uffc8\046\202\001\002\000\004\035\203\001\002\000" +
    "\004\035\uffc9\001\002\000\004\035\uffca\001\002\000\016" +
    "\003\uffcb\017\uffcb\034\uffcb\036\uffcb\040\uffcb\042\uffcb\001" +
    "\002\000\004\043\uffbd\001\002\000\004\043\207\001\002" +
    "\000\004\043\uffbe\001\002\000\016\003\uffbf\017\uffbf\034" +
    "\uffbf\036\uffbf\040\uffbf\042\uffbf\001\002\000\004\041\213" +
    "\001\002\000\004\041\uffc1\001\002\000\004\041\uffc2\001" +
    "\002\000\016\003\uffc3\017\uffc3\034\uffc3\036\uffc3\040\uffc3" +
    "\042\uffc3\001\002\000\016\003\uffd2\017\uffd2\034\uffd2\036" +
    "\uffd2\040\uffd2\042\uffd2\001\002\000\026\003\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\020\uffd5\022\uffd5\024\uffd5\026\uffd5\030" +
    "\uffd5\032\uffd5\001\002\000\004\037\uffc5\001\002\000\004" +
    "\037\221\001\002\000\004\037\uffc6\001\002\000\016\003" +
    "\uffc7\017\uffc7\034\uffc7\036\uffc7\040\uffc7\042\uffc7\001\002" +
    "\000\004\033\uffd7\001\002\000\004\033\uffd8\001\002\000" +
    "\004\033\225\001\002\000\026\003\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\020\uffd9\022\uffd9\024\uffd9\026\uffd9\030\uffd9\032" +
    "\uffd9\001\002\000\004\027\uffb5\001\002\000\004\027\231" +
    "\001\002\000\004\027\uffb6\001\002\000\026\003\uffb7\013" +
    "\uffb7\014\uffb7\016\uffb7\020\uffb7\022\uffb7\024\uffb7\026\uffb7" +
    "\030\uffb7\032\uffb7\001\002\000\010\003\uffef\007\uffef\012" +
    "\uffef\001\002\000\004\021\236\001\002\000\004\021\uffb9" +
    "\001\002\000\004\021\uffba\001\002\000\026\003\uffbb\013" +
    "\uffbb\014\uffbb\016\uffbb\020\uffbb\022\uffbb\024\uffbb\026\uffbb" +
    "\030\uffbb\032\uffbb\001\002\000\004\023\uffb1\001\002\000" +
    "\004\023\242\001\002\000\004\023\uffb2\001\002\000\026" +
    "\003\uffb3\013\uffb3\014\uffb3\016\uffb3\020\uffb3\022\uffb3\024" +
    "\uffb3\026\uffb3\030\uffb3\032\uffb3\001\002\000\004\025\uffad" +
    "\001\002\000\004\025\246\001\002\000\004\025\uffae\001" +
    "\002\000\026\003\uffaf\013\uffaf\014\uffaf\016\uffaf\020\uffaf" +
    "\022\uffaf\024\uffaf\026\uffaf\030\uffaf\032\uffaf\001\002\000" +
    "\004\015\252\001\002\000\004\015\uffdb\001\002\000\004" +
    "\015\uffdc\001\002\000\026\003\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\020\uffdd\022\uffdd\024\uffdd\026\uffdd\030\uffdd\032\uffdd" +
    "\001\002\000\010\003\ufff3\007\ufff3\012\ufff3\001\002\000" +
    "\006\003\ufff6\010\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\002\012\003\004\004\010\006\011\007" +
    "\007\001\001\000\012\012\124\016\130\017\127\030\126" +
    "\001\001\000\002\001\001\000\012\004\123\005\017\007" +
    "\007\010\021\001\001\000\004\011\120\001\001\000\006" +
    "\005\117\010\021\001\001\000\002\001\001\000\006\004" +
    "\015\007\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\017\010\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\027\056\022" +
    "\072\026\073\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\114\100\115\001\001\000\002\001\001" +
    "\000\004\057\102\001\001\000\004\065\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\066\036\067\042\070\041\074\034\103\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\063\063\064\062" +
    "\071\061\075\055\076\057\077\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\070\051\074\034\103\040\001\001\000\006\015" +
    "\044\101\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\044\101\076" +
    "\001\001\000\002\001\001\000\012\063\063\064\062\071" +
    "\061\076\074\001\001\000\006\015\044\101\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\070\102\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\060\110\061\106\062\104\063\105\064\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\062\112\063\105\064\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\010\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\252\030\126\001" +
    "\001\000\030\020\151\021\143\022\132\023\146\024\142" +
    "\025\133\026\140\027\155\031\141\032\153\033\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\246" +
    "\001\001\000\004\037\243\001\001\000\004\036\237\001" +
    "\001\000\004\043\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\223\001\001\000\020\041\165\044\166\045\174\046" +
    "\163\050\170\052\171\054\173\001\001\000\002\001\001" +
    "\000\004\034\161\001\001\000\024\020\151\021\143\022" +
    "\132\023\146\024\142\025\133\026\140\027\155\033\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\216\001" +
    "\001\000\002\001\001\000\014\045\213\046\163\050\170" +
    "\052\171\054\173\001\001\000\004\053\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\204\001\001\000" +
    "\004\047\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public LinkedList<compiler.Error> errors=new LinkedList<>();
	public HashMap<String, Espacio> espacios=new HashMap<>();
	public Estructura estructura=null;
	
	public void report_error(String message, Object info){
		compiler.Error e=new compiler.Error(message,null,null);
		if(info instanceof java_cup.runtime.Symbol){
			e.setSym((java_cup.runtime.Symbol)info);
		}
		errors.add(e);
		//System.err.println("Error "+errors.size());
	}
	public void report_fatal_error(String message,Object info){
		report_error(message,info);
		errors.getLast().println();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	
	compiler.Error.Type LEXICO 		= compiler.Error.Type.LEXIC;
	compiler.Error.Type SINTACTICO 	= compiler.Error.Type.SYNTACTIC;
	compiler.Error.Type SEMANTICO 	= compiler.Error.Type.SEMANTIC;
	String ERROR_ID			= compiler.Error.ERROR_ID;
	String ERROR_INT			= compiler.Error.ERROR_INT;
	String ERROR_BOOLEAN	= compiler.Error.ERROR_BOOLEAN;
	
	
	
	
	public void error(String msg, java_cup.runtime.Symbol sym,compiler.Error.Type type){
		compiler.Error e=parser.errors.getLast();
		if(msg!=null){
			e.setMsg(msg);
		}
		if(sym!=null){
			e.setSym(sym);
		}
		e.setType(type);
		e.println();
	}
	public void errorAll(String msg,Object sym,compiler.Error.Type type){
		parser.report_error(msg,sym);
		error(null,null,type);
	}
	
	
	final HashSet<Thread> espacios_espera=new HashSet<>();
	public void createEspacio	(Attr x){
		
		if(x==null){return;}
		
		final String			nombre		=	x.getString("nombre");
		final File				imagen		=	(File)x.get("imagen");
		final String 			extiende	=	x.getString("extiende");
		final Espacio.Especial	especial	=	(Espacio.Especial)x.get("especial");
		final Boolean 			pasable		=	x.getBoolean("pasable");
		final Boolean			enemigo		=	x.getBoolean("enemigo");
		final Boolean			inicio		=	x.getBoolean("inicio");
		final Boolean			fin			=	x.getBoolean("fin");
		
		if(nombre!=null&&!nombre.isEmpty()&&imagen!=null){
			final HashMap<String, Espacio> espacios = parser.espacios;
			
			Thread t=new Thread(new Runnable(){

				@Override
				public void run() {
					Espacio espacio=new Espacio(nombre,imagen);
					if(extiende!=null){
						synchronized(espacios){
							for(;;){
								Espacio padre=espacios.get(extiende);
								if(padre!=null){
									//heredar del padre aqui
									espacio=padre.clone();
									espacio.setExtiende(padre);
									espacio.setNombre(nombre);
									espacio.setImagen(imagen);
									break;
								}
								try{
									System.out.println(nombre+ " esperando "+extiende+"...");
									espacios.wait();
								} catch (InterruptedException ex) {
									//Error semantico... no se pudo ingresar por no encontrar al padre
									System.err.println("Interrupted: "+ nombre);
									return;
								}
							}
						}
					}
					espacio.setEspecial(especial);
					espacio.setPasable(pasable);
					espacio.setEnemigo(enemigo);
					espacio.setInicio(inicio);
					espacio.setFin(fin);
					put(espacio);
					//System.out.println("Thread ended....");
					espacios_espera.remove(this);
				}
				
				public void put(Espacio espacio){
					synchronized(espacios){
						espacios.put(espacio.getNombre(),espacio);
						System.out.println(espacio.getNombre()+" creado... ");
						//System.out.println(espacio.toString());
						espacios.notifyAll();
					}
				}
			});
			t.start();
			espacios_espera.add(t);
		}
	}

	
	public void addCasilla(Estructura.Casilla casilla){
		if(parser.estructura!=null){
			if(casilla!=null){
				try{
					parser.estructura.addCasilla(casilla);
				} catch(ArrayIndexOutOfBoundsException exc){
					errorAll("Punto ("+casilla.getPunto().x+","+casilla.getPunto().y+") fuera de limite.",null,SEMANTICO);
				}
			}
		}
	}
	void post(){
		System.out.println("compiled ...");
	}
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // nivel_estructura_personaje ::= PERSONAJE_TAG1 nivel_tamanio_body_xy PERSONAJE_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
										RESULT=x;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_personaje",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // nivel_estructura_tipo_body ::= 
            {
              Attr RESULT =null;
		
									RESULT=new Attr();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_tipo_body",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // nivel_estructura_tipo_body ::= error 
            {
              Attr RESULT =null;
		
									error(ERROR_ID,null,SINTACTICO);
									RESULT=new Attr();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_tipo_body",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // nivel_estructura_tipo_body ::= any 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									String tipo=x.getString("any");
									Espacio espacio=parser.espacios.get(tipo);
									if(espacio==null){
										errorAll("No existe el Espacio.",x.get("sym"),SEMANTICO);
									}
									x.clear();
									x.set("tipo",tipo);
									RESULT=x;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_tipo_body",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // nivel_estructura_tipo ::= TIPO_TAG1 nivel_estructura_tipo_body TIPO_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
										String tipo=x.getString("tipo");
										if(tipo==null){
											Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
											errorAll("Falta nombre.",sym,SEMANTICO);
										}
										x.clear();
										x.set("tipo",tipo);
										
										RESULT=x;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_tipo",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // nivel_estructura_casilla_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba etiqueta X,Y o Tipo.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_item",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // nivel_estructura_casilla_item ::= nivel_estructura_tipo 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_item",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // nivel_estructura_casilla_item ::= nivel_tamanio_y 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_item",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // nivel_estructura_casilla_item ::= nivel_tamanio_x 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_item",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // nivel_estructura_casilla_list ::= nivel_estructura_casilla_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // nivel_estructura_casilla_list ::= nivel_estructura_casilla_list nivel_estructura_casilla_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									x.putAll(x1);
									RESULT=x;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // nivel_estructura_casilla_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_body",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // nivel_estructura_casilla_body ::= nivel_estructura_casilla_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla_body",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // nivel_estructura_casilla ::= CASILLA_TAG1 nivel_estructura_casilla_body CASILLA_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									String tipo=x.getString("tipo");
									Integer _x=x.getInt("x");
									Integer _y=x.getInt("y");
									Point punto=null;
									
									if(tipo==null||tipo.isEmpty()){
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Falta tipo.",sym,SEMANTICO);
									}
									if(_x==null){
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Falta X.",sym,SEMANTICO);
									}
									if(_y==null){
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Falta Y.",sym,SEMANTICO);
									}
									
									if(_x!=null&&_y!=null){
										punto=new Point(_x,_y);
									}
									
									if(tipo!=null&&punto!=null){
										
										Espacio espacio=parser.espacios.get(tipo);
										if(espacio!=null){
											Estructura.Casilla casilla=new Estructura.Casilla(punto,espacio);
											casilla.setTipo(espacio);
											addCasilla(casilla);
										}
										
									}
									RESULT=x;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_casilla",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // nivel_estructura_item ::= error 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_item",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // nivel_estructura_item ::= nivel_estructura_personaje 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_item",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // nivel_estructura_item ::= nivel_estructura_casilla 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_item",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // nivel_estructura_list ::= nivel_estructura_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_list",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // nivel_estructura_list ::= nivel_estructura_list nivel_estructura_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							x.putAll(x1);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_list",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // nivel_estructura_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_body",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // nivel_estructura_body ::= nivel_estructura_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura_body",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // nivel_estructura ::= ESTRUCTURA_TAG1 nivel_estructura_body ESTRUCTURA_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if(parser.estructura!=null){
								Point[] nulls=parser.estructura.getNulls();
								if(nulls!=null){
									for(int i=0; i<nulls.length;i++){
										Point p=nulls[i];
										//System.err.println(p);
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Punto ("+p.x+","+p.y+") sin casilla.",sym,SEMANTICO); 
									}
								}
							}
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_estructura",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Attr("int",x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nivel_tamanio_body_xy ::= 
            {
              Attr RESULT =null;
		
								RESULT=new Attr();
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_body_xy",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nivel_tamanio_body_xy ::= error 
            {
              Attr RESULT =null;
		error(ERROR_ID,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_body_xy",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // nivel_tamanio_body_xy ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_body_xy",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // nivel_tamanio_y ::= Y_TAG1 nivel_tamanio_body_xy Y_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer y=x.getInt("int");
							if(y==null){
								Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
								errorAll("Falta un valor el Y.",sym,SEMANTICO);
							}
							x.clear();
							x.set("y",y);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_y",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // nivel_tamanio_x ::= X_TAG1 nivel_tamanio_body_xy X_TAG2 
            {
              Attr RESULT =null;
		int x0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer _x=x.getInt("int");
							if(_x==null){
								Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
								errorAll("Falta un valor el X.",sym,SEMANTICO);
							}
							x.clear();
							x.set("x",_x);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_x",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // nivel_tamanio_item ::= error 
            {
              Attr RESULT =null;
		
							error("Se esperaba una etiqueta X o Y",null,SINTACTICO);
							RESULT=new Attr();
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_item",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // nivel_tamanio_item ::= nivel_tamanio_y 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_item",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // nivel_tamanio_item ::= nivel_tamanio_x 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_item",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // nivel_tamanio_list ::= nivel_tamanio_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_list",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // nivel_tamanio_list ::= nivel_tamanio_list nivel_tamanio_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							x.putAll(x1);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_list",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // nivel_tamanio_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // nivel_tamanio_body ::= nivel_tamanio_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio_body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // nivel_tamanio ::= TAMANIO_TAG1 nivel_tamanio_body TAMANIO_TAG2 
            {
              Attr RESULT =null;
		int x0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Integer _x=x.getInt("x");
						Integer _y=x.getInt("y");
						
						Dimension tamanio=null;
						if(_x!=null&&_y!=null){
							tamanio=new Dimension(_x,_y);
						} else{
							//errores
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
							if(_x==null){
								errorAll("Falta etiqueta X.",sym,SEMANTICO);
							}
							if(_y==null){
								errorAll("Falta etiqueta Y.",sym,SEMANTICO);
							}
						}
						x.clear();
						x.set("tamanio",tamanio);
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_tamanio",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // any ::= ANY 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Attr a=new Attr();
						a.set("any",x);
						a.set("sym",CUP$Parser$stack.elementAt(CUP$Parser$top));
						RESULT=a;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("any",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // nivel_nombre_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_nombre_body",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // nivel_nombre_body ::= error 
            {
              Attr RESULT =null;
		
						error(ERROR_ID,null,SINTACTICO);
						RESULT=new Attr();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_nombre_body",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // nivel_nombre_body ::= any 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						String nombre=x.getString("any");
						x.clear();
						x.set("nombre",nombre);
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_nombre_body",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // nivel_nombre ::= NOMBRE_TAG1 nivel_nombre_body NOMBRE_TAG2 
            {
              Attr RESULT =null;
		int x0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("nombre");
						if(nombre==null||nombre.isEmpty()){
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
							errorAll("Falta nombre de la estructura.",sym,SEMANTICO);
						}
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_nombre",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nivel_body2 ::= error 
            {
              Attr RESULT =null;
		
						error("Se esperaba etiqueta nombre",null,SINTACTICO);
						RESULT=new Attr();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // nivel_body2 ::= nivel_nombre 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // nivel_body1 ::= nivel_body2 error 
            {
              Attr RESULT =null;
		
						error("Se esperaba etiqueta Tamano.",null,SINTACTICO);
						RESULT=new Attr();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // nivel_body1 ::= nivel_body2 nivel_tamanio 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						String nombre=x.getString("nombre");
						Dimension tamanio=(Dimension)x1.get("tamanio");
						if(nombre!=null&&tamanio!=null){
							parser.estructura=new Estructura(nombre,tamanio);
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nivel_body ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nivel_body ::= nivel_body1 error 
            {
              Attr RESULT =null;
		error("Se esperaba etiqueta Estructura.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nivel_body ::= nivel_body1 nivel_estructura 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nivel ::= NIVEL_TAG1 nivel_body NIVEL_TAG2 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nivel",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // espacios_espacio_fin_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_fin_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // espacios_espacio_fin_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_BOOLEAN,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_fin_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // espacios_espacio_fin_body ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									Attr attr=RESULT=new Attr();
									boolean b=false;
									if(x.equals("verdadero")){
										b=true;
									}
									attr.set("fin",b);
									RESULT=attr;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_fin_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // espacios_espacio_fin ::= FIN_TAG1 espacios_espacio_fin_body FIN_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_fin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // espacios_espacio_inicio_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_inicio_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // espacios_espacio_inicio_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_BOOLEAN,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_inicio_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // espacios_espacio_inicio_body ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										boolean b=false;
										if(x.equals("verdadero")){
											b=true;
										}
										attr.set("inicio",b);
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_inicio_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // espacios_espacio_inicio ::= INICIO_TAG1 espacios_espacio_inicio_body INICIO_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_inicio",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // espacios_espacio_enemigo_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_enemigo_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // espacios_espacio_enemigo_body ::= error 
            {
              Attr RESULT =null;
		
										error(ERROR_BOOLEAN,null,SINTACTICO);
										RESULT=new Attr();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_enemigo_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // espacios_espacio_enemigo_body ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										boolean b=false;
										if(x.equals("verdadero")){
											b=true;
										}
										attr.set("enemigo",b);
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_enemigo_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // espacios_espacio_enemigo ::= ENEMIGO_TAG1 espacios_espacio_enemigo_body ENEMIGO_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_enemigo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // espacios_espacio_pasable_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_pasable_body",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // espacios_espacio_pasable_body ::= error 
            {
              Attr RESULT =null;
		
										error(ERROR_BOOLEAN,null,SINTACTICO);
										RESULT=new Attr();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_pasable_body",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // espacios_espacio_pasable_body ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										boolean b=false;
										if(x.equals("verdadero")){
											b=true;
										}
										attr.set("pasable",b);
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_pasable_body",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // espacios_espacio_pasable ::= PASABLE_TAG1 espacios_espacio_pasable_body PASABLE_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_pasable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // espacios_espacio_especial_invi_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_invi_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // espacios_espacio_especial_invi_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_INT,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_invi_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // espacios_espacio_especial_invi_body ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
												Attr attr=RESULT=new Attr();
												attr.set("invencibilidad",x);
												RESULT=attr;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_invi_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // espacios_espacio_especial_invi ::= INVENCIBLE_TAG1 espacios_espacio_especial_invi_body INVENCIBLE_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_invi",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // espacios_espacio_especial_magia_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_magia_body",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // espacios_espacio_especial_magia_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_INT,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_magia_body",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // espacios_espacio_especial_magia_body ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
												Attr attr=RESULT=new Attr();
												attr.set("magia",x);
												RESULT=attr;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_magia_body",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // espacios_espacio_especial_magia ::= MAGIA_TAG1 espacios_espacio_especial_magia_body MAGIA_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_magia",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // espacios_espacio_especial_cura_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_cura_body",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // espacios_espacio_especial_cura_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_INT,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_cura_body",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // espacios_espacio_especial_cura_body ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
												Attr attr=RESULT=new Attr();
												attr.set("cura",x);
												RESULT=attr;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_cura_body",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // espacios_espacio_especial_cura ::= CURA_TAG1 espacios_espacio_especial_cura_body CURA_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_cura",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // espacios_espacio_especial_danio_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_danio_body",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // espacios_espacio_especial_danio_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_INT,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_danio_body",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // espacios_espacio_especial_danio_body ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
												Attr attr=RESULT=new Attr();
												attr.set("danio",x);
												RESULT=attr;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_danio_body",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // espacios_espacio_especial_danio ::= DANIO_TAG1 espacios_espacio_especial_danio_body DANIO_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_danio",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // espacios_espacio_especial_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba una etiqueta de dano,cura,magia o invencibilidad.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // espacios_espacio_especial_item ::= espacios_espacio_especial_invi 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // espacios_espacio_especial_item ::= espacios_espacio_especial_magia 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // espacios_espacio_especial_item ::= espacios_espacio_especial_cura 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // espacios_espacio_especial_item ::= espacios_espacio_especial_danio 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // espacios_espacio_especial_list ::= espacios_espacio_especial_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // espacios_espacio_especial_list ::= espacios_espacio_especial_list espacios_espacio_especial_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										x.putAll(x1);
										RESULT=x;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // espacios_espacio_especial_body ::= 
            {
              Attr RESULT =null;
		
										RESULT=new Attr();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_body",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // espacios_espacio_especial_body ::= espacios_espacio_especial_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Espacio.Especial e=new Espacio.Especial();
										e.setDanio(x.getInt("danio"));
										e.setCura(x.getInt("cura"));
										e.setMagia(x.getInt("magia"));
										e.setInvencibilidad(x.getInt("invencibilidad"));
										x.clear();
										x.set("especial",e);
										RESULT=x;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial_body",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // espacios_espacio_especial ::= ESPECIAL_TAG1 espacios_espacio_especial_body ESPECIAL_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_especial",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // espacios_espacio_imagen_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_imagen_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // espacios_espacio_imagen_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_ID,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_imagen_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // espacios_espacio_imagen_body ::= ANY 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										File imagen=new File (x);
										if(!imagen.exists()){
											Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
											errorAll("No existe la imagen.",sym,SEMANTICO);
										}else{
											if(imagen.isDirectory()){
												Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
												errorAll("No es una imagen.",sym,SEMANTICO);
											}
											attr.set("imagen",imagen);
										}
										
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_imagen_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // espacios_espacio_imagen ::= IMAGEN_TAG1 espacios_espacio_imagen_body IMAGEN_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									File f=(File)x.get("imagen");
									
									if(f==null){
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Falta imagen.",sym,SEMANTICO);
									}
									RESULT=x;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_imagen",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // espacios_espacio_nombre_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_nombre_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // espacios_espacio_nombre_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_ID,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_nombre_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // espacios_espacio_nombre_body ::= ANY 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										String nombre=x;
										if(parser.espacios.containsKey(nombre)){
											Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
											errorAll("Espacio ya definido.",sym,SEMANTICO);
										}else{
											attr.set("nombre",nombre);	
										}
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_nombre_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // espacios_espacio_nombre ::= NOMBRE_TAG1 espacios_espacio_nombre_body NOMBRE_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									String nombre=x.getString("nombre");
									if(nombre==null||nombre.isEmpty()){
										Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
										errorAll("Falta nombre",sym,SEMANTICO);
									}
									RESULT=x;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_nombre",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // espacios_espacio_extiende_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_extiende_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // espacios_espacio_extiende_body ::= error 
            {
              Attr RESULT =null;
		error(ERROR_ID,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_extiende_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // espacios_espacio_extiende_body ::= ANY 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										Attr attr=RESULT=new Attr();
										attr.set("extiende",x);
										RESULT=attr;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_extiende_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // espacios_espacio_extiende ::= EXTIENDE_TAG1 espacios_espacio_extiende_body EXTIENDE_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_extiende",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // espacios_espacio_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba una etiqueta Extiende, Nombre, Pasable, Especial, Inicio, Fin, Enemigo o Imagen",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // espacios_espacio_item ::= espacios_espacio_imagen 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // espacios_espacio_item ::= espacios_espacio_enemigo 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // espacios_espacio_item ::= espacios_espacio_fin 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // espacios_espacio_item ::= espacios_espacio_inicio 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // espacios_espacio_item ::= espacios_espacio_especial 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // espacios_espacio_item ::= espacios_espacio_pasable 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // espacios_espacio_item ::= espacios_espacio_nombre 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // espacios_espacio_item ::= espacios_espacio_extiende 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_item",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // espacios_espacio_list ::= espacios_espacio_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // espacios_espacio_list ::= espacios_espacio_list espacios_espacio_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							x.putAll(x1);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // espacios_espacio_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_body",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // espacios_espacio_body ::= espacios_espacio_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio_body",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // espacios_espacio ::= ESPACIO_TAG1 espacios_espacio_body ESPACIO_TAG2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Espacio espacio=null;
							
							String nombre=x.getString("nombre");
							File imagen=(File)x.get("imagen");
							
							if(nombre==null||nombre.isEmpty()){
								Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
								errorAll("Falta nombre.",sym,SEMANTICO);
							}
							if(imagen==null){
								Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
								errorAll("Falta imagen.",sym,SEMANTICO);
							}
							
							
							if(nombre!=null&&!nombre.isEmpty()&&imagen!=null){
								createEspacio(x);
							}
							
							
							x.clear();
							x.set("espacio",espacio);
							RESULT=x;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_espacio",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // espacios_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba una etiqueta <Espacio></Espacio>.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_item",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // espacios_item ::= espacios_espacio 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_item",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // espacios_list ::= espacios_item 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // espacios_list ::= espacios_list espacios_item 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // espacios_body ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // espacios_body ::= espacios_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios_body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // espacios ::= ESPACIOS_TAG1 espacios_body ESPACIOS_TAG2 
            {
              Attr RESULT =null;
		
						//darles mas tiempo a los que esperan padres
						//de lo contrario error
						if(!espacios_espera.isEmpty()){
							Thread.sleep(500);
							for(Thread t : espacios_espera){
								if(t.getState()==State.WAITING){	
									t.interrupt();
									//error
								}
							}
							espacios_espera.clear();
						}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importar_body ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar_body",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // importar ::= IMPORTAR_TAG1 importar_body IMPORTAR_TAG2 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importar",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lvl2 ::= error 
            {
              Attr RESULT =null;
		error(" Malformación de la seción Nivel.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lvl2 ::= nivel 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lvl1 ::= error lvl2 
            {
              Attr RESULT =null;
		error(" Malformación de la seción Espacios.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lvl1 ::= espacios lvl2 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lvl ::= lvl1 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lvl ::= error lvl1 
            {
              Attr RESULT =null;
		error(" Malformación de la seción Import.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lvl ::= importar lvl1 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= lvl 
            {
              Attr RESULT =null;
		post();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

