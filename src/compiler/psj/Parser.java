
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 11 23:35:15 CST 2013
//----------------------------------------------------

package compiler.psj;

import compiler.Attr;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Image;
import javax.swing.ImageIcon;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 11 23:35:15 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\005" +
    "\005\000\002\005\003\000\002\006\003\000\002\007\004" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\012\005\000\002\016\005\000\002\013\005" +
    "\000\002\014\005\000\002\015\005\000\002\017\005\000" +
    "\002\003\003\000\002\004\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\006\003\005\006\004\001\002\000\012\003" +
    "\030\004\012\005\027\017\023\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\001\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\014\003\030\004\012" +
    "\005\027\007\ufffd\017\023\001\002\000\004\016\uffea\001" +
    "\002\000\014\003\ufffa\004\ufffa\005\ufffa\007\ufffa\017\ufffa" +
    "\001\002\000\014\003\ufff8\004\ufff8\005\ufff8\007\ufff8\017" +
    "\ufff8\001\002\000\004\016\043\001\002\000\014\003\ufff4" +
    "\004\ufff4\005\ufff4\007\ufff4\017\ufff4\001\002\000\014\003" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\017\ufff6\001\002\000\014" +
    "\003\ufff7\004\ufff7\005\ufff7\007\ufff7\017\ufff7\001\002\000" +
    "\014\003\ufffb\004\ufffb\005\ufffb\007\ufffb\017\ufffb\001\002" +
    "\000\014\003\ufff5\004\ufff5\005\ufff5\007\ufff5\017\ufff5\001" +
    "\002\000\004\016\uffe9\001\002\000\014\003\ufff9\004\ufff9" +
    "\005\ufff9\007\ufff9\017\ufff9\001\002\000\004\016\041\001" +
    "\002\000\004\016\033\001\002\000\004\016\uffeb\001\002" +
    "\000\014\003\ufff3\004\ufff3\005\ufff3\007\ufff3\017\ufff3\001" +
    "\002\000\004\007\032\001\002\000\004\002\uffff\001\002" +
    "\000\014\011\036\012\037\013\040\014\034\015\035\001" +
    "\002\000\014\003\uffee\004\uffee\005\uffee\007\uffee\017\uffee" +
    "\001\002\000\014\003\uffed\004\uffed\005\uffed\007\uffed\017" +
    "\uffed\001\002\000\014\003\ufff1\004\ufff1\005\ufff1\007\ufff1" +
    "\017\ufff1\001\002\000\014\003\ufff0\004\ufff0\005\ufff0\007" +
    "\ufff0\017\ufff0\001\002\000\014\003\uffef\004\uffef\005\uffef" +
    "\007\uffef\017\uffef\001\002\000\004\020\042\001\002\000" +
    "\014\003\uffec\004\uffec\005\uffec\007\uffec\017\uffec\001\002" +
    "\000\004\010\044\001\002\000\014\003\ufff2\004\ufff2\005" +
    "\ufff2\007\ufff2\017\ufff2\001\002\000\014\003\ufffc\004\ufffc" +
    "\005\ufffc\007\ufffc\017\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\006\002\006\005\005\001\001\000\034\003" +
    "\014\004\025\006\030\007\010\010\020\011\012\012\023" +
    "\013\017\014\016\015\021\016\013\017\015\020\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\014\004\025\010\044\011" +
    "\012\012\023\013\017\014\016\015\021\016\013\017\015" +
    "\020\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public LinkedList<compiler.Error> errors=new LinkedList<>();
	public Personaje personaje=null;
	
	public void report_error(String message, Object info){
		compiler.Error e=new compiler.Error(message,null,null);
		if(info instanceof java_cup.runtime.Symbol){
			e.setSym((java_cup.runtime.Symbol)info);
		}
		errors.add(e);
	}
	public void report_fatal_error(String message,Object info){
		report_error(message,info);
		errors.getLast().println();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	
	compiler.Error.Type LEXICO 		= compiler.Error.Type.LEXIC;
	compiler.Error.Type SINTACTICO 	= compiler.Error.Type.SYNTACTIC;
	compiler.Error.Type SEMANTICO 	= compiler.Error.Type.SEMANTIC;
	String ERROR_ID					= compiler.Error.ERROR_ID;
	String ERROR_INT				= compiler.Error.ERROR_INT;
	String ERROR_BOOLEAN			= compiler.Error.ERROR_BOOLEAN;
	
	
	
	
	public void error(String msg, java_cup.runtime.Symbol sym,compiler.Error.Type type){
		compiler.Error e=parser.errors.getLast();
		if(msg!=null){
			e.setMsg(msg);
		}
		if(sym!=null){
			e.setSym(sym);
		}
		e.setType(type);
		e.println();
	}
	public void errorAll(String msg,Object sym,compiler.Error.Type type){
		parser.report_error(msg,sym);
		error(null,null,type);
	}
	
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							Attr a=new Attr();
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
							a.set("val",x);
							a.set("sym",sym);
							RESULT=a;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							Attr a=new Attr();
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
							a.set("val",x);
							a.set("sym",sym);
							RESULT=a;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							Attr a=new Attr();
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
							a.set("val",x);
							a.set("sym",sym);
							
							RESULT=a;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // psj_imagen ::= string COLON IMAGEN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_imagen",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // psj_costo_magico ::= int COLON COSTO_MAGICO 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_costo_magico",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // psj_fuerza_magica ::= int COLON FUERZA_MAGICA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_fuerza_magica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // psj_magia ::= int COLON MAGIA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_magia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // psj_fuerza ::= int COLON FUERZA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_fuerza",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // psj_vida ::= int COLON VIDA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_vida",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // psj_nombre ::= id COLON NOMBRE 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_nombre",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // psj_item ::= error 
            {
              Attr RESULT =null;
		
						error("Se esperaba un atributo.",null,SINTACTICO);
						RESULT=new Attr();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // psj_item ::= psj_imagen 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("imagen",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // psj_item ::= psj_costo_magico 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("costo_magico",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // psj_item ::= psj_fuerza_magica 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("fuerza_magica",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // psj_item ::= psj_magia 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("magia",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // psj_item ::= psj_fuerza 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("fuerza",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // psj_item ::= psj_vida 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("vida",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // psj_item ::= psj_nombre 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						x.set("nombre",x.get("val"));
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_item",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // psj_list ::= psj_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // psj_list ::= psj_list psj_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.putAll(x);
						RESULT=l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // psj_body ::= psj_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj_body",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // psj ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba  Iniciar Personaje.",null,SINTACTICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // psj ::= INICIAR psj_body FINALIZAR 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String 	nombre			= 	x.getString("nombre");
						Integer	vida			=	x.getInt("vida");
						Integer	fuerza			=	x.getInt("fuerza");
						Integer	magia			=	x.getInt("magia");
						Integer	fuerza_magica	=	x.getInt("fuerza_magica");
						Integer	costo_magico	=	x.getInt("costo_magico");
						String	imagen			=	x.getString("imagen");
						
						
						
						
						if(nombre!=null&&vida!=null&&fuerza!=null&&magia!=null&&fuerza_magica!=null&&costo_magico!=null){
							parser.personaje=new Personaje(nombre,vida,fuerza,magia,fuerza_magica,costo_magico);
							
							if(imagen==null){
								imagen="ext/psj/car1.png";
							}
							Image img=(new ImageIcon(imagen)).getImage();
							parser.personaje.setImagen(img);
							//System.out.println("Personaje: "+nombre+" creado...");
						}
						else{
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
							if(nombre==null||nombre.isEmpty()){
								errorAll("Falta nombre.",sym,SEMANTICO);
							}
							if(vida==null){
								errorAll("Falta vida.",sym,SEMANTICO);
							}
							if(fuerza==null){
								errorAll("Falta fuerza.",sym,SEMANTICO);
							}
							if(magia==null){
								errorAll("Falta magia.",sym,SEMANTICO);
							}
							if(fuerza_magica==null){
								errorAll("Falta fuerza magica.",sym,SEMANTICO);
							}
							if(costo_magico==null){
								errorAll("Falta costo magico.",sym,SEMANTICO);
							}
						}
						
						
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("psj",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= psj 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

