/* The following code was generated by JFlex 1.4.3 on 3/30/13 11:11 PM */

package compiler.bad;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.lang.StringBuilder;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/30/13 11:11 PM from the specification file
 * <tt>s.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\1\2\0\1\2\16\11\4\0\1\3\1\36\1\75"+
    "\1\0\1\10\1\0\1\35\1\7\1\32\1\33\1\22\1\43\1\31"+
    "\1\5\1\6\1\44\12\4\1\25\1\0\1\42\1\37\1\41\2\0"+
    "\1\67\1\23\1\27\1\24\1\30\1\54\1\10\1\63\1\52\2\10"+
    "\1\53\1\61\2\10\1\66\2\10\1\45\1\56\1\10\1\73\4\10"+
    "\1\0\1\76\2\0\1\70\1\0\1\17\1\72\1\65\1\26\1\15"+
    "\1\16\1\50\1\55\1\46\2\10\1\20\1\62\1\47\1\51\1\71"+
    "\1\10\1\13\1\21\1\12\1\14\1\64\1\60\1\10\1\57\1\74"+
    "\1\0\1\34\2\0\41\11\1\0\1\40\4\10\4\0\1\10\2\0"+
    "\1\11\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0"+
    "\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\21\0"+
    "\160\11\5\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\1\0\5\11"+
    "\2\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\11\0\55\11"+
    "\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0\33\10"+
    "\5\0\3\10\15\0\4\11\7\0\1\10\4\0\13\11\5\0\53\10"+
    "\37\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0\6\11"+
    "\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10\17\0"+
    "\1\11\1\10\1\11\36\10\33\11\2\0\131\10\13\11\1\10\16\0"+
    "\12\11\41\10\11\11\2\10\4\0\1\10\5\0\26\10\4\11\1\10"+
    "\11\11\1\10\3\11\1\10\5\11\22\0\31\10\3\11\244\0\4\11"+
    "\66\10\3\11\1\10\22\11\1\10\7\11\12\10\2\11\2\0\12\11"+
    "\1\0\7\10\1\0\7\10\1\0\3\11\1\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\11"+
    "\1\10\7\11\2\0\2\11\2\0\3\11\1\10\10\0\1\11\4\0"+
    "\2\10\1\0\3\10\2\11\2\0\12\11\4\10\7\0\1\10\5\0"+
    "\3\11\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0"+
    "\2\11\2\0\3\11\3\0\1\11\7\0\4\10\1\0\1\10\7\0"+
    "\14\11\3\10\1\11\13\0\3\11\1\0\11\10\1\0\3\10\1\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10"+
    "\10\11\1\0\3\11\1\0\3\11\2\0\1\10\17\0\2\10\2\11"+
    "\2\0\12\11\1\0\1\10\17\0\3\11\1\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11"+
    "\1\10\7\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\10"+
    "\1\0\3\10\2\11\2\0\12\11\1\0\1\10\20\0\1\11\1\10"+
    "\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10"+
    "\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\11"+
    "\3\0\3\11\1\0\4\11\2\0\1\10\6\0\1\11\16\0\12\11"+
    "\11\0\1\10\7\0\3\11\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\1\10\7\11\1\0\3\11\1\0"+
    "\4\11\7\0\2\11\1\0\2\10\6\0\2\10\2\11\2\0\12\11"+
    "\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11\1\0\4\11"+
    "\7\0\2\11\7\0\1\10\1\0\2\10\2\11\2\0\12\11\1\0"+
    "\2\10\17\0\2\11\1\0\10\10\1\0\3\10\1\0\51\10\2\0"+
    "\1\10\7\11\1\0\3\11\1\0\4\11\1\10\10\0\1\11\10\0"+
    "\2\10\2\11\2\0\12\11\12\0\6\10\2\0\2\11\1\0\22\10"+
    "\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\3\0\1\11"+
    "\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0\60\10"+
    "\1\11\2\10\7\11\4\0\10\10\10\11\1\0\12\11\47\0\2\10"+
    "\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10"+
    "\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\1\0\4\10\1\11\2\10\6\11\1\0\2\11\1\10\2\0\5\10"+
    "\1\0\1\10\1\0\6\11\2\0\12\11\2\0\2\10\42\0\1\10"+
    "\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0\1\11"+
    "\4\0\2\11\10\10\1\0\44\10\4\0\24\11\1\0\2\11\5\10"+
    "\13\11\1\0\44\11\11\0\1\11\71\0\53\10\24\11\1\10\12\11"+
    "\6\0\6\10\4\11\4\10\3\11\1\10\3\11\2\10\7\11\3\10"+
    "\4\11\15\10\14\11\1\10\17\11\2\0\46\10\12\0\53\10\1\0"+
    "\1\10\3\0\u0149\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0"+
    "\4\10\2\0\103\10\2\0\3\11\40\0\20\10\20\0\125\10\14\0"+
    "\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10\17\0"+
    "\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0\22\10\2\11"+
    "\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10\40\11\3\0"+
    "\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11\2\0\12\11"+
    "\6\0\130\10\10\0\51\10\1\11\1\10\5\0\106\10\12\0\35\10"+
    "\3\0\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\13\0"+
    "\54\10\4\0\21\11\7\10\2\11\6\0\12\11\46\0\27\10\5\11"+
    "\4\0\65\10\12\11\1\0\35\11\2\0\13\11\6\0\12\11\15\0"+
    "\1\10\130\0\5\11\57\10\21\11\7\10\4\0\12\11\21\0\11\11"+
    "\14\0\3\11\36\10\12\11\3\0\2\10\12\11\6\0\46\10\16\11"+
    "\14\0\44\10\24\11\10\0\12\11\3\0\3\10\12\11\44\10\122\0"+
    "\3\11\1\0\25\11\4\10\1\11\4\10\1\11\15\0\300\10\47\11"+
    "\25\0\4\11\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0"+
    "\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0"+
    "\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\16\0"+
    "\5\11\32\0\5\11\20\0\2\10\23\0\1\10\13\0\5\11\5\0"+
    "\6\11\1\0\1\10\15\0\1\10\20\0\15\10\3\0\32\10\26\0"+
    "\15\11\4\0\1\11\3\0\14\11\21\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0"+
    "\1\10\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10\6\0"+
    "\4\10\3\11\16\0\46\10\12\0\66\10\11\0\1\10\17\0\1\11"+
    "\27\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\40\11\57\0"+
    "\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0\5\10\2\0\5\10"+
    "\4\0\126\10\2\0\2\11\2\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cc\10\64\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\11\2\10\24\0\57\10\1\11\14\0\2\11\1\0\31\10\10\0"+
    "\120\10\2\11\45\0\11\10\2\0\147\10\2\0\4\10\1\0\2\10"+
    "\16\0\12\10\120\0\10\10\1\11\3\10\1\11\4\10\1\11\27\10"+
    "\5\11\20\0\1\10\7\0\64\10\14\0\2\11\62\10\21\11\13\0"+
    "\12\11\6\0\22\11\6\10\3\0\1\10\4\0\12\11\34\10\10\11"+
    "\2\0\27\10\15\11\14\0\35\10\3\0\4\11\57\10\16\11\16\0"+
    "\1\10\12\11\46\0\51\10\16\11\11\0\3\10\1\11\10\10\2\11"+
    "\2\0\12\11\6\0\27\10\3\0\1\10\1\11\4\0\60\10\1\11"+
    "\1\10\3\11\2\10\2\11\5\10\2\11\1\10\1\11\1\10\30\0"+
    "\3\10\43\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\43\10\10\11\1\0\2\11\2\0\12\11\6\0\u2ba4\10"+
    "\14\0\27\10\4\0\61\10\u2104\0\u012e\10\2\0\76\10\2\0\152\10"+
    "\46\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11"+
    "\20\0\7\11\14\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10"+
    "\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10"+
    "\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\1\6\5\1\6"+
    "\4\5\1\7\1\10\1\11\2\1\1\12\2\1\1\13"+
    "\1\14\1\15\1\16\17\5\1\17\1\20\1\21\1\22"+
    "\1\2\4\0\12\5\1\23\7\5\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\22\5\1\34\1\35"+
    "\1\36\1\37\2\0\1\40\2\0\1\41\1\42\12\5"+
    "\1\43\1\44\1\45\12\5\1\46\14\5\1\47\1\50"+
    "\5\5\1\51\1\5\1\52\3\5\1\53\1\5\1\54"+
    "\11\5\1\55\12\5\1\56\23\5\1\57\2\5\1\60"+
    "\1\61\1\62\2\5\1\63\1\64\5\5\1\65\11\5"+
    "\1\66\1\5\1\67\1\70\2\5\1\71\2\5\1\72"+
    "\5\5\1\73\10\5\1\74\1\75\1\76\1\5\1\77"+
    "\3\5\1\100\6\5\1\101\1\5\1\102\1\5\1\103"+
    "\1\5\1\104\5\5\1\105\2\5\1\106\14\5\1\107"+
    "\1\5\1\110\4\5\1\111\2\5\1\112\15\5\1\113"+
    "\1\114\1\115\2\5\1\116\2\5\1\117\1\120\2\5"+
    "\1\121\1\5\1\122\2\5\1\123\3\5\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\275"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\275\0\275\0\275\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\275\0\275"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\275"+
    "\0\u09d8\0\275\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u01f8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\275\0\275\0\275\0\275"+
    "\0\u142e\0\u146d\0\u0ad4\0\u14ac\0\u14eb\0\275\0\275\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\275\0\275\0\275\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u01f8\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\275\0\u01f8\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u01f8\0\u1e45\0\u01f8\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u01f8\0\u1f41\0\u01f8\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u01f8\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u01f8"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u01f8\0\u28da\0\u2919\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u2958\0\u2997\0\u01f8\0\u01f8\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u01f8\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u01f8\0\u2d48\0\u01f8\0\u01f8"+
    "\0\u2d87\0\u2dc6\0\u01f8\0\u2e05\0\u2e44\0\u01f8\0\u2e83\0\u2ec2"+
    "\0\u2f01\0\u2f40\0\u2f7f\0\u01f8\0\u2fbe\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u01f8\0\u01f8\0\u01f8\0\u31b6"+
    "\0\u01f8\0\u31f5\0\u3234\0\u3273\0\u01f8\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u01f8\0\u342c\0\u01f8\0\u346b\0\u01f8"+
    "\0\u34aa\0\u01f8\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u01f8"+
    "\0\u3624\0\u3663\0\u01f8\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e"+
    "\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u01f8"+
    "\0\u3996\0\u01f8\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u01f8\0\u3ad1"+
    "\0\u3b10\0\u01f8\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a"+
    "\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u3e82\0\u3ec1\0\u01f8\0\u3f00\0\u3f3f\0\u01f8"+
    "\0\u01f8\0\u3f7e\0\u3fbd\0\u01f8\0\u3ffc\0\u01f8\0\u403b\0\u407a"+
    "\0\u01f8\0\u40b9\0\u40f8\0\u4137\0\u01f8\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\1\4\1\11"+
    "\1\12\1\4\1\13\2\12\1\14\1\15\1\16\1\12"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\12"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\12\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\12\1\51\1\52"+
    "\1\53\1\12\1\54\1\55\2\12\1\56\1\57\2\12"+
    "\1\60\1\4\1\61\2\4\72\61\1\62\1\63\22\5"+
    "\1\64\54\5\100\0\1\5\101\0\1\7\1\65\1\66"+
    "\74\0\1\7\1\67\71\0\1\70\3\0\73\70\4\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\71\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\2\12\1\72"+
    "\25\12\6\0\1\12\3\0\7\12\1\73\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\1\12\1\74\26\12\6\0"+
    "\1\12\3\0\3\12\1\75\1\76\4\12\1\77\1\0"+
    "\2\12\1\0\1\100\2\12\14\0\17\12\1\101\10\12"+
    "\6\0\1\12\3\0\5\12\1\102\4\12\1\0\2\12"+
    "\1\0\3\12\14\0\1\12\1\103\26\12\6\0\1\12"+
    "\3\0\12\12\1\0\1\12\1\104\1\0\1\12\1\105"+
    "\1\106\14\0\4\12\1\107\23\12\6\0\1\12\3\0"+
    "\5\12\1\110\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\1\12\1\111\26\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\10\12\1\112"+
    "\17\12\36\0\1\113\1\114\76\0\1\115\100\0\1\116"+
    "\76\0\1\117\75\0\1\120\77\0\1\121\76\0\1\122"+
    "\43\0\1\12\3\0\2\12\1\123\7\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\5\12"+
    "\1\124\4\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\125\26\12\6\0\1\12\3\0\2\12\1\126\7\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\2\12"+
    "\1\127\25\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\4\12\1\130\23\12\6\0\1\12"+
    "\3\0\10\12\1\131\1\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\7\12\1\132\2\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\133\26\12\6\0\1\12\3\0\5\12\1\134\4\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\135\26\12\6\0\1\12\3\0\5\12\1\136\4\12"+
    "\1\0\2\12\1\0\3\12\14\0\1\12\1\137\26\12"+
    "\6\0\1\12\3\0\3\12\1\140\6\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\7\12"+
    "\1\141\2\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\3\12\1\142\3\12\1\143\2\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\4\12"+
    "\1\144\23\12\2\0\1\61\2\0\72\61\14\0\1\145"+
    "\1\146\33\0\1\147\25\0\1\150\6\0\1\151\75\0"+
    "\1\152\76\0\1\153\1\154\71\0\1\155\1\5\1\6"+
    "\17\155\1\156\54\155\7\0\1\157\73\0\1\12\3\0"+
    "\4\12\1\160\5\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\2\12\1\161\7\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\10\12\1\162\1\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\163\25\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\15\12\1\164"+
    "\12\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\15\12\1\165\12\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\1\12\1\166"+
    "\26\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\1\167\2\12\14\0\30\12\6\0\1\12\3\0\7\12"+
    "\1\170\2\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\2\12\1\171\7\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\172\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\173\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\174\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\4\12\1\175\23\12\6\0\1\12"+
    "\3\0\2\12\1\176\7\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\11\12\1\177\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\7\12\1\200\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\201\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\2\12\1\202\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\203\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\3\12\1\204\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\2\12\1\205\7\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\2\12\1\206"+
    "\10\12\1\207\14\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\4\12\1\210\23\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\20\12\1\211\7\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\2\12\1\212\25\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\1\213\2\12"+
    "\14\0\30\12\6\0\1\12\3\0\5\12\1\214\4\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\7\12\1\215\2\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\3\12\1\216\24\12\6\0\1\12"+
    "\3\0\5\12\1\217\4\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\4\12\1\220\5\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\221\26\12\6\0\1\12\3\0\3\12\1\222\6\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\3\12\1\223\6\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\7\0\1\224\75\0\1\152\1\65\1\66"+
    "\74\0\1\153\72\0\1\155\1\5\1\6\17\155\1\0"+
    "\54\155\4\0\1\12\3\0\5\12\1\225\4\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\4\12\1\226"+
    "\23\12\6\0\1\12\3\0\11\12\1\160\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\3\12\14\0\23\12\1\227\4\12"+
    "\6\0\1\12\3\0\7\12\1\230\2\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\5\12"+
    "\1\231\4\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\3\12\1\232\24\12\6\0\1\12\3\0\6\12"+
    "\1\233\3\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\2\12\1\234\25\12\6\0\1\12\3\0\6\12"+
    "\1\235\3\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\10\12\1\236\1\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\5\12"+
    "\1\237\4\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\15\12\1\240\12\12\6\0\1\12\3\0\3\12"+
    "\1\241\6\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\1\12\1\242\26\12\6\0\1\12\3\0\6\12"+
    "\1\243\3\12\1\0\1\244\1\12\1\0\3\12\14\0"+
    "\1\245\4\12\1\246\1\247\5\12\1\250\11\12\1\251"+
    "\1\12\6\0\1\12\3\0\7\12\1\252\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\4\12\1\253"+
    "\23\12\6\0\1\12\3\0\5\12\1\254\4\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\3\12\1\255"+
    "\24\12\6\0\1\12\3\0\7\12\1\256\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\5\12\1\257\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\260\25\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\1\12\1\261"+
    "\26\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\262\25\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\17\12\1\263"+
    "\10\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\10\12\1\264\17\12\6\0\1\12\3\0"+
    "\7\12\1\265\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\11\12\1\266\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\3\12\14\0\2\12\1\267\25\12"+
    "\6\0\1\12\3\0\7\12\1\270\2\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\1\271\2\12\14\0\30\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\2\12\1\272\25\12\6\0\1\12\3\0\11\12\1\273"+
    "\1\0\2\12\1\0\3\12\14\0\15\12\1\274\6\12"+
    "\1\275\3\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\21\12\1\276\6\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\2\12"+
    "\1\277\25\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\2\12\1\300\25\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\27\12"+
    "\1\301\6\0\1\12\3\0\5\12\1\302\4\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\2\12\1\303"+
    "\25\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\1\12\1\304\26\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\2\12\1\305"+
    "\25\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\4\12\1\306\23\12\6\0\1\12\3\0"+
    "\2\12\1\307\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\310\25\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\1\12\1\311"+
    "\26\12\6\0\1\12\3\0\4\12\1\312\5\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\7\12\1\313\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\314\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\23\12\1\315"+
    "\4\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\3\12\1\316\24\12\6\0\1\12\3\0"+
    "\2\12\1\317\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\320\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\12\12\1\321"+
    "\15\12\6\0\1\12\3\0\4\12\1\322\5\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\2\12\1\323\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\12\12\1\324\15\12\6\0\1\12\3\0"+
    "\2\12\1\325\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\326\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\7\12\1\327\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\2\12\1\330\7\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\5\12\1\331\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\20\12\1\332\7\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\1\12\1\333"+
    "\26\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\1\12\1\334\26\12\6\0\1\12\3\0"+
    "\7\12\1\335\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\336\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\2\12\1\337\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\7\12\1\340\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\7\12\1\341\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\7\12\1\342\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\5\12\1\343\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\344\25\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\3\12\1\345"+
    "\24\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\4\12\1\346\23\12\6\0\1\12\3\0"+
    "\3\12\1\347\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\2\12\1\350\7\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\25\12\1\351"+
    "\2\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\352\25\12\6\0\1\12\3\0"+
    "\10\12\1\353\1\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\20\12\1\354\7\12\6\0\1\12\3\0"+
    "\5\12\1\355\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\15\12\1\356\12\12\6\0\1\12\3\0"+
    "\3\12\1\357\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\2\12\1\360\14\0\5\12\1\361\13\12\1\362\1\363"+
    "\5\12\6\0\1\12\3\0\3\12\1\364\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\10\12\1\365\1\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\11\12\1\366\16\12\6\0\1\12\3\0"+
    "\5\12\1\367\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\5\12\1\370\4\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\3\12\1\371\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\4\12\1\372\23\12\6\0\1\12\3\0"+
    "\7\12\1\373\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\374\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\3\12\1\375\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\376\25\12\6\0\1\12\3\0"+
    "\3\12\1\377\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\4\12\1\u0100\5\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\10\12\1\u0101\1\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\3\12\1\u0102\6\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\1\12\1\u0103"+
    "\26\12\6\0\1\12\3\0\7\12\1\u0104\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\3\12\1\u0105\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\7\12\1\u0106\2\12\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\11\12\1\u0107\1\0\2\12\1\0\3\12\14\0\2\12"+
    "\1\u0108\25\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\15\12\1\u0109\12\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\4\12"+
    "\1\u010a\23\12\6\0\1\12\3\0\3\12\1\u010b\6\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\2\12"+
    "\1\u010c\25\12\6\0\1\12\3\0\7\12\1\u010d\2\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\11\12\1\u010e\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\2\12\1\u010f\25\12\6\0\1\12\3\0"+
    "\7\12\1\u0110\2\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\24\12\1\u0111\3\12\6\0\1\12\3\0"+
    "\3\12\1\u0112\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\1\u0113\15\12\1\u0114\2\12\1\u0115\1\u0116"+
    "\5\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\1\12\1\u0117\26\12\6\0\1\12\3\0"+
    "\5\12\1\u0118\4\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\20\12\1\u0119\7\12\6\0\1\12\3\0"+
    "\11\12\1\u011a\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\11\12\1\u011b\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\2\12\1\u011c"+
    "\7\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\5\12\1\u011d\4\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\7\12\1\u011e"+
    "\2\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\2\12\1\u011f\7\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\15\12\1\u0120\12\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\25\12\1\u0121\2\12\6\0\1\12\3\0\2\12\1\u0122"+
    "\7\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\1\12\1\u0123\26\12\6\0\1\12\3\0\7\12\1\u0124"+
    "\2\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\7\12\1\u0125\2\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\7\12\1\u0126"+
    "\2\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\3\12\1\u0127\6\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\3\12\1\u0128"+
    "\6\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\1\12\1\u0129\26\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\4\12\1\u012a\23\12\6\0"+
    "\1\12\3\0\3\12\1\u012b\6\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\15\12\1\u012c\12\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\3\12\14\0"+
    "\3\12\1\u012d\24\12\6\0\1\12\3\0\5\12\1\u012e"+
    "\4\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\7\12\1\u012f\2\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\10\12\1\u0130"+
    "\1\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\3\12\1\u0131\6\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\7\12\1\u0132"+
    "\2\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\10\12\1\u0133\1\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\25\12\1\u0134\2\12\6\0"+
    "\1\12\3\0\11\12\1\u0135\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\15\12\1\u0136\12\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\4\12"+
    "\1\u0137\23\12\6\0\1\12\3\0\7\12\1\u0138\2\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\u0139\26\12\6\0\1\12\3\0\5\12\1\u013a\4\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\2\12"+
    "\1\u013b\25\12\6\0\1\12\3\0\5\12\1\u013c\4\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\7\12\1\u013d\2\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\2\12\1\u013e\7\12"+
    "\1\0\2\12\1\0\3\12\14\0\30\12\6\0\1\12"+
    "\3\0\12\12\1\0\2\12\1\0\3\12\14\0\1\12"+
    "\1\u013f\26\12\6\0\1\12\3\0\12\12\1\0\2\12"+
    "\1\0\3\12\14\0\4\12\1\u0140\23\12\6\0\1\12"+
    "\3\0\7\12\1\u0141\2\12\1\0\2\12\1\0\3\12"+
    "\14\0\30\12\6\0\1\12\3\0\11\12\1\u0142\1\0"+
    "\2\12\1\0\3\12\14\0\30\12\6\0\1\12\3\0"+
    "\2\12\1\u0143\7\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\3\12\1\u0144\24\12\6\0\1\12\3\0"+
    "\12\12\1\0\2\12\1\0\3\12\14\0\2\12\1\u0145"+
    "\25\12\6\0\1\12\3\0\12\12\1\0\2\12\1\0"+
    "\3\12\14\0\20\12\1\u0146\7\12\6\0\1\12\3\0"+
    "\3\12\1\u0147\6\12\1\0\2\12\1\0\3\12\14\0"+
    "\30\12\6\0\1\12\3\0\11\12\1\u0148\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\3\12\14\0\4\12\1\u0149\23\12"+
    "\6\0\1\12\3\0\10\12\1\u014a\1\12\1\0\2\12"+
    "\1\0\3\12\14\0\30\12\6\0\1\12\3\0\5\12"+
    "\1\u014b\4\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\4\12\1\u014c\23\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\3\12\14\0\1\12\1\u014d\26\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\4\12\1\u014e\23\12\6\0\1\12\3\0\12\12"+
    "\1\0\2\12\1\0\3\12\14\0\1\12\1\u014f\26\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\3\12"+
    "\14\0\3\12\1\u0150\24\12\6\0\1\12\3\0\7\12"+
    "\1\u0151\2\12\1\0\2\12\1\0\3\12\14\0\30\12"+
    "\6\0\1\12\3\0\12\12\1\0\2\12\1\0\1\u0152"+
    "\2\12\14\0\30\12\6\0\1\12\3\0\12\12\1\0"+
    "\2\12\1\0\3\12\14\0\1\12\1\u0153\26\12\6\0"+
    "\1\12\3\0\7\12\1\u0154\2\12\1\0\2\12\1\0"+
    "\3\12\14\0\30\12\6\0\1\12\3\0\7\12\1\u0155"+
    "\2\12\1\0\2\12\1\0\3\12\14\0\30\12\6\0"+
    "\1\12\3\0\12\12\1\0\2\12\1\0\1\u0156\2\12"+
    "\14\0\30\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\1\11\4\1\3\11\7\1\2\11"+
    "\17\1\1\11\1\1\1\11\2\1\4\0\22\1\10\11"+
    "\22\1\4\11\2\0\1\1\2\0\2\11\12\1\3\11"+
    "\27\1\1\11\302\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/** Errores **/
	public LinkedList<compiler.Error> errors=new LinkedList<>();
	private void error(String message) {
		
		Symbol sym=new Symbol(Sym.error, yyline, yycolumn, yytext());
		compiler.Error e=new compiler.Error(message,sym,compiler.Error.Type.LEXIC);
		errors.add(e);
	}
	/** String **/
	StringBuilder string=new StringBuilder();
	
	/** Symbol **/
	private Symbol num_symbol(){
		int type=Sym.NERROR;
		
		try{
			Long num=new Long(yytext());
			if(num>=-16599999&&num<=16599999){
				type=Sym.INT;
			} else if (num>=-165999990000L&&num<=165999990000L){
				type=Sym.LONG;
			}
		}catch (java.lang.NumberFormatException exc){
			error("Número demasiado grande.");
		}
		return new Symbol(type, yyline, yycolumn,yytext());
	}
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn,yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { return symbol(Sym.FIN_PARA);
          }
        case 86: break;
        case 45: 
          { return symbol(Sym.KW_LONG);
          }
        case 87: break;
        case 79: 
          { return symbol(Sym.FIN_MIENTRAS);
          }
        case 88: break;
        case 63: 
          { return symbol(Sym.FUNC_GET_BOOL);
          }
        case 89: break;
        case 65: 
          { return symbol(Sym.PROC_PRINTLN);
          }
        case 90: break;
        case 53: 
          { return symbol(Sym.FIN_SI);
          }
        case 91: break;
        case 51: 
          { return symbol(Sym.HEAVY);
          }
        case 92: break;
        case 6: 
          { return symbol(Sym.MULTI);
          }
        case 93: break;
        case 76: 
          { return symbol(Sym.PROC_ASIGNAR_ARMA);
          }
        case 94: break;
        case 56: 
          { return symbol(Sym.FUNC_GET_INT);
          }
        case 95: break;
        case 27: 
          { return symbol(Sym.LETHAN);
          }
        case 96: break;
        case 12: 
          { return symbol(Sym.LTHAN);
          }
        case 97: break;
        case 15: 
          { string.setLength(0);yybegin(STRING);
          }
        case 98: break;
        case 46: 
          { return symbol(Sym.PARA);
          }
        case 99: break;
        case 20: 
          { return symbol(Sym.OR);
          }
        case 100: break;
        case 1: 
          { error("Illegal character.");
          }
        case 101: break;
        case 80: 
          { return symbol(Sym.PROC_ASIGNAR_SALTO);
          }
        case 102: break;
        case 30: 
          { string.append('\n');
          }
        case 103: break;
        case 9: 
          { return symbol(Sym.P2);
          }
        case 104: break;
        case 31: 
          { string.append('\"');
          }
        case 105: break;
        case 8: 
          { return symbol(Sym.P1);
          }
        case 106: break;
        case 43: 
          { return symbol(Sym.KW_CHAR);
          }
        case 107: break;
        case 37: 
          { return symbol(Sym.BE);
          }
        case 108: break;
        case 64: 
          { return symbol(Sym.KW_INTEGER);
          }
        case 109: break;
        case 22: 
          { return symbol(Sym.AND);
          }
        case 110: break;
        case 23: 
          { return symbol(Sym.NEQUAL);
          }
        case 111: break;
        case 35: 
          { return symbol(Sym.BD);
          }
        case 112: break;
        case 36: 
          { return symbol(Sym.BC);
          }
        case 113: break;
        case 40: 
          { return symbol(Sym.BOOLEAN);
          }
        case 114: break;
        case 29: 
          { string.append('\r');
          }
        case 115: break;
        case 10: 
          { return symbol(Sym.NOT);
          }
        case 116: break;
        case 48: 
          { return symbol(Sym.KW_FLOAT);
          }
        case 117: break;
        case 7: 
          { return symbol(Sym.COMA);
          }
        case 118: break;
        case 52: 
          { return symbol(Sym.HIGHT);
          }
        case 119: break;
        case 75: 
          { return symbol(Sym.PROC_ASIGNAR_PASO);
          }
        case 120: break;
        case 25: 
          { return symbol(Sym.ENULL);
          }
        case 121: break;
        case 28: 
          { string.append('\t');
          }
        case 122: break;
        case 44: 
          { return symbol(Sym.FUNC_GET_F);
          }
        case 123: break;
        case 69: 
          { return symbol(Sym.FUNC_GET_LIBRE);
          }
        case 124: break;
        case 68: 
          { return symbol(Sym.AUMENTAR);
          }
        case 125: break;
        case 55: 
          { return symbol(Sym.FUNC_GET_STR);
          }
        case 126: break;
        case 33: 
          { yybegin(COMMENT);
          }
        case 127: break;
        case 5: 
          { return symbol(Sym.ID);
          }
        case 128: break;
        case 32: 
          { return symbol(Sym.FLOAT);
          }
        case 129: break;
        case 4: 
          { return symbol(Sym.MINUS);
          }
        case 130: break;
        case 21: 
          { return symbol(Sym.XOR);
          }
        case 131: break;
        case 3: 
          { return num_symbol();
          }
        case 132: break;
        case 24: 
          { return symbol(Sym.EQUAL);
          }
        case 133: break;
        case 58: 
          { return symbol(Sym.MEDIUM);
          }
        case 134: break;
        case 71: 
          { return symbol(Sym.DISMINUIR);
          }
        case 135: break;
        case 19: 
          { return symbol(Sym.SI);
          }
        case 136: break;
        case 26: 
          { return symbol(Sym.BETHAN);
          }
        case 137: break;
        case 57: 
          { return symbol(Sym.FUNC_GET_VAL);
          }
        case 138: break;
        case 54: 
          { return symbol(Sym.KW_STRING);
          }
        case 139: break;
        case 13: 
          { return symbol(Sym.PLUS);
          }
        case 140: break;
        case 83: 
          { return symbol(Sym.CREAR_POTENCIA);
          }
        case 141: break;
        case 38: 
          { return symbol(Sym.LOW);
          }
        case 142: break;
        case 78: 
          { return symbol(Sym.CREAR_IMAGEN);
          }
        case 143: break;
        case 17: 
          { yybegin(YYINITIAL); 
					return symbol(Sym.STRING,string.toString());
          }
        case 144: break;
        case 85: 
          { return symbol(Sym.PROC_ASIGNAR_HABILIDAD);
          }
        case 145: break;
        case 72: 
          { return symbol(Sym.OTRO_CASO);
          }
        case 146: break;
        case 60: 
          { return symbol(Sym.PROC_AVANZAR);
          }
        case 147: break;
        case 41: 
          { return symbol(Sym.ADDF);
          }
        case 148: break;
        case 39: 
          { yybegin(YYINITIAL);
          }
        case 149: break;
        case 18: 
          { string.append('\\');
          }
        case 150: break;
        case 59: 
          { return symbol(Sym.PAUSAR);
          }
        case 151: break;
        case 81: 
          { return symbol(Sym.CREAR_ENEMIGO);
          }
        case 152: break;
        case 74: 
          { return symbol(Sym.FUNC_ARMA_PROPIA);
          }
        case 153: break;
        case 62: 
          { return symbol(Sym.DETENER);
          }
        case 154: break;
        case 34: 
          { return symbol(Sym.CHAR);
          }
        case 155: break;
        case 49: 
          { return symbol(Sym.HACER);
          }
        case 156: break;
        case 73: 
          { return symbol(Sym.CREAR_ARMA);
          }
        case 157: break;
        case 50: 
          { return symbol(Sym.TINNY);
          }
        case 158: break;
        case 82: 
          { return symbol(Sym.FUNC_BORDE_TABLERO);
          }
        case 159: break;
        case 61: 
          { return symbol(Sym.KW_BOOLEAN);
          }
        case 160: break;
        case 16: 
          { string.append( yytext() );
          }
        case 161: break;
        case 11: 
          { return symbol(Sym.BTHAN);
          }
        case 162: break;
        case 66: 
          { return symbol(Sym.ENTONCES);
          }
        case 163: break;
        case 47: 
          { return symbol(Sym.PROC_GIRAR);
          }
        case 164: break;
        case 77: 
          { return symbol(Sym.FUNC_GET_MUNICIONES);
          }
        case 165: break;
        case 84: 
          { return symbol(Sym.CREAR_ESTRATEGIA);
          }
        case 166: break;
        case 70: 
          { return symbol(Sym.MIENTRAS);
          }
        case 167: break;
        case 42: 
          { return symbol(Sym.PROC_SETF);
          }
        case 168: break;
        case 2: 
          { 
          }
        case 169: break;
        case 14: 
          { return symbol(Sym.DIV);
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
