
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 01 00:29:41 CST 2013
//----------------------------------------------------

package compiler.bad;

import compiler.Attr;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;
import compiler.bad.Enemigos.Hoja;
import compiler.bad.Enemigos.Operacion;
import compiler.bad.Enemigos.Simbolo;
import compiler.bad.Enemigos.Simbolo.Tipo;
import compiler.bad.Enemigos.Potencia;
import compiler.Error;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 01 00:29:41 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\011\004\000\002\012\004\000\002\013\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\002\000" +
    "\002\031\004\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\011\000\002\035" +
    "\004\000\002\035\002\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\036\004\000\002" +
    "\037\003\000\002\037\002\000\002\040\004\000\002\040" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\012\000\002\043\010\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\044\016\000\002\046\014" +
    "\000\002\047\012\000\002\050\004\000\002\051\003\000" +
    "\002\051\002\000\002\052\004\000\002\052\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\006\000\002\055" +
    "\003\000\002\055\002\000\002\056\004\000\002\056\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\006\000" +
    "\002\057\003\000\002\060\020\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\061\003\000\002\061" +
    "\002\000\002\062\004\000\002\062\003\000\002\063\003" +
    "\000\002\063\003\000\002\064\005\000\002\065\003\000" +
    "\002\066\010\000\002\066\005\000\002\066\005\000\002" +
    "\067\003\000\002\070\003\000\002\070\002\000\002\071" +
    "\004\000\002\071\003\000\002\072\003\000\002\072\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\075\006\000\002\075\012\000\002\075\006\000\002\075" +
    "\010\000\002\075\010\000\002\075\006\000\002\075\006" +
    "\000\002\075\006\000\002\075\010\000\002\075\010\000" +
    "\002\075\010\000\002\076\010\000\002\076\016\000\002" +
    "\076\014\000\002\076\012\000\002\076\012\000\002\076" +
    "\014\000\002\076\012\000\002\026\006\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\004\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\003\000\002" +
    "\003\003\000\002\004\003\000\002\007\003\000\002\005" +
    "\003\000\002\006\003\000\002\010\003\000\002\025\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\006\002\uffff\006\007\001\002\000\004\007" +
    "\u011d\001\002\000\004\010\232\001\002\000\004\007\ufffc" +
    "\001\002\000\012\003\017\007\ufff9\047\014\050\020\001" +
    "\002\000\004\002\001\001\002\000\004\002\012\001\002" +
    "\000\004\002\000\001\002\000\004\007\ufffb\001\002\000" +
    "\004\015\226\001\002\000\012\003\ufff6\007\ufff6\047\ufff6" +
    "\050\ufff6\001\002\000\012\003\ufff5\007\ufff5\047\ufff5\050" +
    "\ufff5\001\002\000\012\003\ufff4\007\ufff4\047\ufff4\050\ufff4" +
    "\001\002\000\004\015\024\001\002\000\012\003\ufff7\007" +
    "\ufff7\047\ufff7\050\ufff7\001\002\000\012\003\017\007\ufffa" +
    "\047\014\050\020\001\002\000\012\003\ufff8\007\ufff8\047" +
    "\ufff8\050\ufff8\001\002\000\004\005\025\001\002\000\130" +
    "\003\uff73\016\uff73\017\uff73\026\uff73\027\uff73\030\uff73\032" +
    "\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\047\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\074\uff73" +
    "\076\uff73\101\uff73\102\uff73\103\uff73\104\uff73\105\uff73\106" +
    "\uff73\107\uff73\110\uff73\113\uff73\114\uff73\115\uff73\116\uff73" +
    "\117\uff73\120\uff73\121\uff73\122\uff73\001\002\000\004\017" +
    "\027\001\002\000\020\003\032\020\036\021\035\022\031" +
    "\023\030\024\034\025\037\001\002\000\006\016\uffed\017" +
    "\uffed\001\002\000\006\016\uffee\017\uffee\001\002\000\006" +
    "\016\uffea\017\uffea\001\002\000\006\016\ufff1\017\040\001" +
    "\002\000\006\016\uffeb\017\uffeb\001\002\000\006\016\uffec" +
    "\017\uffec\001\002\000\006\016\uffef\017\uffef\001\002\000" +
    "\006\016\ufff0\017\ufff0\001\002\000\056\003\057\004\046" +
    "\005\025\011\055\012\044\013\071\014\074\015\053\031" +
    "\050\040\064\046\076\070\052\071\045\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\001\002\000\004\016\042\001\002\000\012\003\ufff3" +
    "\007\ufff3\047\ufff3\050\ufff3\001\002\000\130\003\uff76\016" +
    "\uff76\017\uff76\026\uff76\027\uff76\030\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\047\uff76\063\uff76\064\uff76\065\uff76\066\uff76" +
    "\067\uff76\070\uff76\071\uff76\072\uff76\074\uff76\076\uff76\101" +
    "\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76" +
    "\110\uff76\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76\120" +
    "\uff76\121\uff76\122\uff76\001\002\000\130\003\uff71\016\uff71" +
    "\017\uff71\026\uff71\027\uff71\030\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\041\uff71\042\uff71\043\uff71" +
    "\044\uff71\047\uff71\063\uff71\064\uff71\065\uff71\066\uff71\067" +
    "\uff71\070\uff71\071\uff71\072\uff71\074\uff71\076\uff71\101\uff71" +
    "\102\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110" +
    "\uff71\113\uff71\114\uff71\115\uff71\116\uff71\117\uff71\120\uff71" +
    "\121\uff71\122\uff71\001\002\000\004\015\221\001\002\000" +
    "\130\003\uff72\016\uff72\017\uff72\026\uff72\027\uff72\030\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\041" +
    "\uff72\042\uff72\043\uff72\044\uff72\047\uff72\063\uff72\064\uff72" +
    "\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\074" +
    "\uff72\076\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105\uff72" +
    "\106\uff72\107\uff72\110\uff72\113\uff72\114\uff72\115\uff72\116" +
    "\uff72\117\uff72\120\uff72\121\uff72\122\uff72\001\002\000\130" +
    "\003\uff77\016\uff77\017\uff77\026\uff77\027\uff77\030\uff77\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\047\uff77\063\uff77\064\uff77\065" +
    "\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\074\uff77" +
    "\076\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106" +
    "\uff77\107\uff77\110\uff77\113\uff77\114\uff77\115\uff77\116\uff77" +
    "\117\uff77\120\uff77\121\uff77\122\uff77\001\002\000\054\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\040\064\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\004\015\213\001\002\000\004\015" +
    "\206\001\002\000\056\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\031\050\040\064\046" +
    "\076\070\052\071\045\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\001\002\000" +
    "\004\015\177\001\002\000\130\003\uff70\016\uff70\017\uff70" +
    "\026\uff70\027\uff70\030\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\036\uff70\037\uff70\041\uff70\042\uff70\043\uff70\044\uff70" +
    "\047\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067\uff70\070" +
    "\uff70\071\uff70\072\uff70\074\uff70\076\uff70\101\uff70\102\uff70" +
    "\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\113" +
    "\uff70\114\uff70\115\uff70\116\uff70\117\uff70\120\uff70\121\uff70" +
    "\122\uff70\001\002\000\130\003\uff78\016\uff78\017\uff78\026" +
    "\uff78\027\uff78\030\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\041\uff78\042\uff78\043\uff78\044\uff78\047" +
    "\uff78\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78" +
    "\071\uff78\072\uff78\074\uff78\076\uff78\101\uff78\102\uff78\103" +
    "\uff78\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\113\uff78" +
    "\114\uff78\115\uff78\116\uff78\117\uff78\120\uff78\121\uff78\122" +
    "\uff78\001\002\000\130\003\uff74\016\uff74\017\uff74\026\uff74" +
    "\027\uff74\030\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036" +
    "\uff74\037\uff74\041\uff74\042\uff74\043\uff74\044\uff74\047\uff74" +
    "\063\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071" +
    "\uff74\072\uff74\074\uff74\076\uff74\101\uff74\102\uff74\103\uff74" +
    "\104\uff74\105\uff74\106\uff74\107\uff74\110\uff74\113\uff74\114" +
    "\uff74\115\uff74\116\uff74\117\uff74\120\uff74\121\uff74\122\uff74" +
    "\001\002\000\004\015\170\001\002\000\004\015\165\001" +
    "\002\000\130\003\uff7c\016\uff7c\017\uff7c\026\uff7c\027\uff7c" +
    "\030\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\047\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\074\uff7c\076\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c" +
    "\105\uff7c\106\uff7c\107\uff7c\110\uff7c\113\uff7c\114\uff7c\115" +
    "\uff7c\116\uff7c\117\uff7c\120\uff7c\121\uff7c\122\uff7c\001\002" +
    "\000\130\003\uff7a\016\uff7a\017\uff7a\026\uff7a\027\uff7a\030" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\047\uff7a\063\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\074\uff7a\076\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\107\uff7a\110\uff7a\113\uff7a\114\uff7a\115\uff7a" +
    "\116\uff7a\117\uff7a\120\uff7a\121\uff7a\122\uff7a\001\002\000" +
    "\052\003\057\004\046\005\025\011\055\012\044\013\071" +
    "\014\074\015\053\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\130\003\uff7d\016\uff7d\017\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d" +
    "\036\uff7d\037\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\047" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\074\uff7d\076\uff7d\101\uff7d\102\uff7d\103" +
    "\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\113\uff7d" +
    "\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d\122" +
    "\uff7d\001\002\000\130\003\uff7b\016\uff7b\017\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036" +
    "\uff7b\037\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\047\uff7b" +
    "\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071" +
    "\uff7b\072\uff7b\074\uff7b\076\uff7b\101\uff7b\102\uff7b\103\uff7b" +
    "\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b\113\uff7b\114" +
    "\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b" +
    "\001\002\000\004\015\161\001\002\000\004\015\156\001" +
    "\002\000\130\003\uff6f\016\uff6f\017\uff6f\026\uff6f\027\uff6f" +
    "\030\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\047\uff6f\063\uff6f" +
    "\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072" +
    "\uff6f\074\uff6f\076\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f" +
    "\105\uff6f\106\uff6f\107\uff6f\110\uff6f\113\uff6f\114\uff6f\115" +
    "\uff6f\116\uff6f\117\uff6f\120\uff6f\121\uff6f\122\uff6f\001\002" +
    "\000\004\015\151\001\002\000\006\016\ufff2\026\113\001" +
    "\002\000\130\003\uff6e\016\uff6e\017\uff6e\026\uff6e\027\uff6e" +
    "\030\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\047\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072" +
    "\uff6e\074\uff6e\076\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e" +
    "\105\uff6e\106\uff6e\107\uff6e\110\uff6e\113\uff6e\114\uff6e\115" +
    "\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e\122\uff6e\001\002" +
    "\000\130\003\uff7e\016\uff7e\017\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\047\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e" +
    "\074\uff7e\076\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105" +
    "\uff7e\106\uff7e\107\uff7e\110\uff7e\113\uff7e\114\uff7e\115\uff7e" +
    "\116\uff7e\117\uff7e\120\uff7e\121\uff7e\122\uff7e\001\002\000" +
    "\130\003\uff6d\016\uff6d\017\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\041" +
    "\uff6d\042\uff6d\043\uff6d\044\uff6d\047\uff6d\063\uff6d\064\uff6d" +
    "\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\074" +
    "\uff6d\076\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d" +
    "\106\uff6d\107\uff6d\110\uff6d\113\uff6d\114\uff6d\115\uff6d\116" +
    "\uff6d\117\uff6d\120\uff6d\121\uff6d\122\uff6d\001\002\000\130" +
    "\003\uff81\016\uff81\017\uff81\026\uff81\027\uff81\030\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\041\uff81" +
    "\042\uff81\043\145\044\144\047\uff81\063\uff81\064\uff81\065" +
    "\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\074\uff81" +
    "\076\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106" +
    "\uff81\107\uff81\110\uff81\113\uff81\114\uff81\115\uff81\116\uff81" +
    "\117\uff81\120\uff81\121\uff81\122\uff81\001\002\000\124\003" +
    "\uff84\016\uff84\017\uff84\026\uff84\027\uff84\030\uff84\032\uff84" +
    "\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\041\142\042" +
    "\141\047\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84" +
    "\070\uff84\071\uff84\072\uff84\074\uff84\076\uff84\101\uff84\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84" +
    "\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84\120\uff84\121" +
    "\uff84\122\uff84\001\002\000\120\003\uff86\016\uff86\017\uff86" +
    "\026\uff86\027\uff86\030\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\047\uff86\063\uff86\064\uff86\065\uff86" +
    "\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\074\uff86\076" +
    "\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86" +
    "\107\uff86\110\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117" +
    "\uff86\120\uff86\121\uff86\122\uff86\001\002\000\120\003\uff8d" +
    "\016\uff8d\017\uff8d\026\uff8d\027\uff8d\030\uff8d\032\130\033" +
    "\131\034\125\035\127\036\132\037\126\047\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\074\uff8d\076\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\106\uff8d\107\uff8d\110\uff8d\113\uff8d\114\uff8d\115" +
    "\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d\001\002" +
    "\000\004\015\122\001\002\000\104\003\uff8f\016\uff8f\017" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\047\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\074" +
    "\uff8f\076\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f" +
    "\106\uff8f\107\uff8f\110\uff8f\113\uff8f\114\uff8f\115\uff8f\116" +
    "\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f\001\002\000\104" +
    "\003\uff91\016\uff91\017\uff91\026\uff91\027\uff91\030\120\047" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\072\uff91\074\uff91\076\uff91\101\uff91\102\uff91\103" +
    "\uff91\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91\113\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\122" +
    "\uff91\001\002\000\102\003\uff93\016\uff93\017\uff93\026\uff93" +
    "\027\116\047\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\074\uff93\076\uff93\101\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110" +
    "\uff93\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93\120\uff93" +
    "\121\uff93\122\uff93\001\002\000\130\003\uff79\016\uff79\017" +
    "\uff79\026\uff79\027\uff79\030\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\036\uff79\037\uff79\041\uff79\042\uff79\043\uff79\044" +
    "\uff79\047\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79" +
    "\070\uff79\071\uff79\072\uff79\074\uff79\076\uff79\101\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110\uff79" +
    "\113\uff79\114\uff79\115\uff79\116\uff79\117\uff79\120\uff79\121" +
    "\uff79\122\uff79\001\002\000\004\015\111\001\002\000\056" +
    "\003\057\004\046\005\025\011\055\012\044\013\071\014" +
    "\074\015\053\031\050\040\064\046\076\070\052\071\045" +
    "\101\061\102\060\103\070\104\072\105\054\106\067\107" +
    "\103\110\110\113\051\001\002\000\006\016\114\026\113" +
    "\001\002\000\056\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\031\050\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\140" +
    "\002\uffa0\003\uffa0\016\uffa0\017\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\047\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102" +
    "\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0" +
    "\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121" +
    "\uffa0\122\uffa0\001\002\000\102\003\uff94\016\uff94\017\uff94" +
    "\026\uff94\027\116\047\uff94\063\uff94\064\uff94\065\uff94\066" +
    "\uff94\067\uff94\070\uff94\071\uff94\072\uff94\074\uff94\076\uff94" +
    "\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107" +
    "\uff94\110\uff94\113\uff94\114\uff94\115\uff94\116\uff94\117\uff94" +
    "\120\uff94\121\uff94\122\uff94\001\002\000\056\003\057\004" +
    "\046\005\025\011\055\012\044\013\071\014\074\015\053" +
    "\031\050\040\064\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\104\003\uff92\016\uff92\017\uff92\026" +
    "\uff92\027\uff92\030\120\047\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\074\uff92\076" +
    "\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92" +
    "\107\uff92\110\uff92\113\uff92\114\uff92\115\uff92\116\uff92\117" +
    "\uff92\120\uff92\121\uff92\122\uff92\001\002\000\056\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\031\050\040\064\046\076\070\052\071\045\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\001\002\000\104\003\uff90\016\uff90\017\uff90" +
    "\026\uff90\027\uff90\030\uff90\047\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\074\uff90" +
    "\076\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106" +
    "\uff90\107\uff90\110\uff90\113\uff90\114\uff90\115\uff90\116\uff90" +
    "\117\uff90\120\uff90\121\uff90\122\uff90\001\002\000\056\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\031\050\040\064\046\076\070\052\071\045\101" +
    "\061\102\060\103\070\104\072\105\054\106\067\107\103" +
    "\110\110\113\051\001\002\000\006\016\124\026\113\001" +
    "\002\000\140\002\uffa1\003\uffa1\016\uffa1\017\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\047\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107" +
    "\uffa1\110\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1" +
    "\120\uffa1\121\uffa1\122\uffa1\001\002\000\054\003\057\004" +
    "\046\005\025\011\055\012\044\013\071\014\074\015\053" +
    "\040\064\046\076\070\052\071\045\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\001\002\000\054\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\054\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\040\064\046\076\070\052\071\045\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\001\002\000\054\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\040\064\046\076\070" +
    "\052\071\045\101\061\102\060\103\070\104\072\105\054" +
    "\106\067\107\103\110\110\113\051\001\002\000\054\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\040\064\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\054\003\057\004\046\005\025\011" +
    "\055\012\044\013\071\014\074\015\053\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\120" +
    "\003\uff8a\016\uff8a\017\uff8a\026\uff8a\027\uff8a\030\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\047\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\074\uff8a\076\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\113\uff8a\114" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\122\uff8a" +
    "\001\002\000\120\003\uff8b\016\uff8b\017\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\047\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\074\uff8b\076\uff8b\101\uff8b" +
    "\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\110" +
    "\uff8b\113\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b" +
    "\121\uff8b\122\uff8b\001\002\000\120\003\uff8c\016\uff8c\017" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\047\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\074\uff8c" +
    "\076\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106" +
    "\uff8c\107\uff8c\110\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c" +
    "\117\uff8c\120\uff8c\121\uff8c\122\uff8c\001\002\000\120\003" +
    "\uff87\016\uff87\017\uff87\026\uff87\027\uff87\030\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\047\uff87\063" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\074\uff87\076\uff87\101\uff87\102\uff87\103\uff87\104" +
    "\uff87\105\uff87\106\uff87\107\uff87\110\uff87\113\uff87\114\uff87" +
    "\115\uff87\116\uff87\117\uff87\120\uff87\121\uff87\122\uff87\001" +
    "\002\000\120\003\uff89\016\uff89\017\uff89\026\uff89\027\uff89" +
    "\030\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\047\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\074\uff89\076\uff89\101\uff89\102" +
    "\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\110\uff89" +
    "\113\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89\121" +
    "\uff89\122\uff89\001\002\000\120\003\uff88\016\uff88\017\uff88" +
    "\026\uff88\027\uff88\030\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\047\uff88\063\uff88\064\uff88\065\uff88" +
    "\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\074\uff88\076" +
    "\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88" +
    "\107\uff88\110\uff88\113\uff88\114\uff88\115\uff88\116\uff88\117" +
    "\uff88\120\uff88\121\uff88\122\uff88\001\002\000\052\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\046\076\070\052\071\045\101\061\102\060\103\070" +
    "\104\072\105\054\106\067\107\103\110\110\113\051\001" +
    "\002\000\052\003\057\004\046\005\025\011\055\012\044" +
    "\013\071\014\074\015\053\046\076\070\052\071\045\101" +
    "\061\102\060\103\070\104\072\105\054\106\067\107\103" +
    "\110\110\113\051\001\002\000\130\003\uff83\016\uff83\017" +
    "\uff83\026\uff83\027\uff83\030\uff83\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\041\uff83\042\uff83\043\145\044" +
    "\144\047\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\074\uff83\076\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83" +
    "\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\120\uff83\121" +
    "\uff83\122\uff83\001\002\000\052\003\057\004\046\005\025" +
    "\011\055\012\044\013\071\014\074\015\053\046\076\070" +
    "\052\071\045\101\061\102\060\103\070\104\072\105\054" +
    "\106\067\107\103\110\110\113\051\001\002\000\052\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\046\076\070\052\071\045\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\001\002\000\130\003\uff80\016\uff80\017\uff80\026\uff80\027" +
    "\uff80\030\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\037\uff80\041\uff80\042\uff80\043\uff80\044\uff80\047\uff80\063" +
    "\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\074\uff80\076\uff80\101\uff80\102\uff80\103\uff80\104" +
    "\uff80\105\uff80\106\uff80\107\uff80\110\uff80\113\uff80\114\uff80" +
    "\115\uff80\116\uff80\117\uff80\120\uff80\121\uff80\122\uff80\001" +
    "\002\000\130\003\uff7f\016\uff7f\017\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\047\uff7f\063\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\074\uff7f\076\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\106\uff7f\107\uff7f\110\uff7f\113\uff7f\114\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\121\uff7f\122\uff7f\001\002" +
    "\000\130\003\uff82\016\uff82\017\uff82\026\uff82\027\uff82\030" +
    "\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\041\uff82\042\uff82\043\145\044\144\047\uff82\063\uff82\064" +
    "\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\074\uff82\076\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105" +
    "\uff82\106\uff82\107\uff82\110\uff82\113\uff82\114\uff82\115\uff82" +
    "\116\uff82\117\uff82\120\uff82\121\uff82\122\uff82\001\002\000" +
    "\004\005\025\001\002\000\004\017\153\001\002\000\020" +
    "\003\032\020\036\021\035\022\031\023\030\024\034\025" +
    "\037\001\002\000\004\016\155\001\002\000\140\002\uffa4" +
    "\003\uffa4\016\uffa4\017\uffa4\026\uffa4\027\uffa4\030\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\047\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4\103" +
    "\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\122" +
    "\uffa4\001\002\000\056\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\031\050\040\064\046" +
    "\076\070\052\071\045\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\001\002\000" +
    "\006\016\160\026\113\001\002\000\140\002\uffa5\003\uffa5" +
    "\016\uffa5\017\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\047\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\113\uffa5\114\uffa5" +
    "\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5\001" +
    "\002\000\056\003\057\004\046\005\025\011\055\012\044" +
    "\013\071\014\074\015\053\031\050\040\064\046\076\070" +
    "\052\071\045\101\061\102\060\103\070\104\072\105\054" +
    "\106\067\107\103\110\110\113\051\001\002\000\006\016" +
    "\163\026\113\001\002\000\140\002\uffa2\003\uffa2\016\uffa2" +
    "\017\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\047\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\107\uffa2\110\uffa2\113\uffa2\114\uffa2\115\uffa2" +
    "\116\uffa2\117\uffa2\120\uffa2\121\uffa2\122\uffa2\001\002\000" +
    "\124\003\uff85\016\uff85\017\uff85\026\uff85\027\uff85\030\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\041" +
    "\142\042\141\047\uff85\063\uff85\064\uff85\065\uff85\066\uff85" +
    "\067\uff85\070\uff85\071\uff85\072\uff85\074\uff85\076\uff85\101" +
    "\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85" +
    "\110\uff85\113\uff85\114\uff85\115\uff85\116\uff85\117\uff85\120" +
    "\uff85\121\uff85\122\uff85\001\002\000\056\003\057\004\046" +
    "\005\025\011\055\012\044\013\071\014\074\015\053\031" +
    "\050\040\064\046\076\070\052\071\045\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\001\002\000\006\016\167\026\113\001\002\000\140" +
    "\002\uffa7\003\uffa7\016\uffa7\017\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\047\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7" +
    "\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121" +
    "\uffa7\122\uffa7\001\002\000\056\003\057\004\046\005\025" +
    "\011\055\012\044\013\071\014\074\015\053\031\050\040" +
    "\064\046\076\070\052\071\045\101\061\102\060\103\070" +
    "\104\072\105\054\106\067\107\103\110\110\113\051\001" +
    "\002\000\006\017\172\026\113\001\002\000\056\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\031\050\040\064\046\076\070\052\071\045\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\001\002\000\006\017\174\026\113\001\002" +
    "\000\056\003\057\004\046\005\025\011\055\012\044\013" +
    "\071\014\074\015\053\031\050\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\006\016\176" +
    "\026\113\001\002\000\140\002\uffa6\003\uffa6\016\uffa6\017" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\047\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076" +
    "\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\106\uffa6\107\uffa6\110\uffa6\113\uffa6\114\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\120\uffa6\121\uffa6\122\uffa6\001\002\000\004" +
    "\005\025\001\002\000\004\017\201\001\002\000\020\003" +
    "\032\020\036\021\035\022\031\023\030\024\034\025\037" +
    "\001\002\000\004\016\203\001\002\000\140\002\uffa3\003" +
    "\uffa3\016\uffa3\017\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\047\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3" +
    "\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\113\uffa3\114" +
    "\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\122\uffa3" +
    "\001\002\000\006\016\205\026\113\001\002\000\130\003" +
    "\uff75\016\uff75\017\uff75\026\uff75\027\uff75\030\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\041\uff75\042" +
    "\uff75\043\uff75\044\uff75\047\uff75\063\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\074\uff75\076" +
    "\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\110\uff75\113\uff75\114\uff75\115\uff75\116\uff75\117" +
    "\uff75\120\uff75\121\uff75\122\uff75\001\002\000\004\005\025" +
    "\001\002\000\004\017\210\001\002\000\020\003\032\020" +
    "\036\021\035\022\031\023\030\024\034\025\037\001\002" +
    "\000\004\016\212\001\002\000\140\002\uff9f\003\uff9f\016" +
    "\uff9f\017\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\047\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f" +
    "\105\uff9f\106\uff9f\107\uff9f\110\uff9f\113\uff9f\114\uff9f\115" +
    "\uff9f\116\uff9f\117\uff9f\120\uff9f\121\uff9f\122\uff9f\001\002" +
    "\000\056\003\057\004\046\005\025\011\055\012\044\013" +
    "\071\014\074\015\053\031\050\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\006\017\215" +
    "\026\113\001\002\000\056\003\057\004\046\005\025\011" +
    "\055\012\044\013\071\014\074\015\053\031\050\040\064" +
    "\046\076\070\052\071\045\101\061\102\060\103\070\104" +
    "\072\105\054\106\067\107\103\110\110\113\051\001\002" +
    "\000\006\016\217\026\113\001\002\000\140\002\uff9d\003" +
    "\uff9d\016\uff9d\017\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\047\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\113\uff9d\114" +
    "\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d\122\uff9d" +
    "\001\002\000\120\003\uff8e\016\uff8e\017\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\032\130\033\131\034\125\035\127\036\132" +
    "\037\126\047\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\074\uff8e\076\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110" +
    "\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\122\uff8e\001\002\000\004\005\025\001\002\000" +
    "\004\017\223\001\002\000\020\003\032\020\036\021\035" +
    "\022\031\023\030\024\034\025\037\001\002\000\004\016" +
    "\225\001\002\000\140\002\uff9e\003\uff9e\016\uff9e\017\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\047\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106" +
    "\uff9e\107\uff9e\110\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\120\uff9e\121\uff9e\122\uff9e\001\002\000\056\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\031\050\040\064\046\076\070\052\071\045\101" +
    "\061\102\060\103\070\104\072\105\054\106\067\107\103" +
    "\110\110\113\051\001\002\000\006\016\230\026\113\001" +
    "\002\000\102\002\uff95\003\uff95\007\uff95\047\uff95\050\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071" +
    "\uff95\073\uff95\074\uff95\075\uff95\077\uff95\101\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\113" +
    "\uff95\114\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95" +
    "\122\uff95\001\002\000\004\002\ufffe\001\002\000\062\002" +
    "\uffd1\003\255\047\014\063\257\067\242\070\052\071\045" +
    "\074\254\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\114\256\115\244\116\243" +
    "\117\245\120\241\121\233\122\236\001\002\000\004\015" +
    "\u0113\001\002\000\076\002\uffab\003\uffab\047\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\073" +
    "\uffab\074\uffab\075\uffab\077\uffab\101\uffab\102\uffab\103\uffab" +
    "\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\113\uffab\114" +
    "\uffab\115\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab" +
    "\001\002\000\004\002\uffd3\001\002\000\004\015\u010c\001" +
    "\002\000\076\002\uffaa\003\uffaa\047\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\110\uffaa\113\uffaa\114\uffaa\115" +
    "\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122\uffaa\001\002" +
    "\000\076\002\uffad\003\uffad\047\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\073\uffad\074\uffad" +
    "\075\uffad\077\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\113\uffad\114\uffad\115\uffad" +
    "\116\uffad\117\uffad\120\uffad\121\uffad\122\uffad\001\002\000" +
    "\004\015\u0105\001\002\000\004\005\025\001\002\000\004" +
    "\015\347\001\002\000\004\015\334\001\002\000\004\015" +
    "\325\001\002\000\076\002\uffac\003\uffac\047\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\073" +
    "\uffac\074\uffac\075\uffac\077\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\113\uffac\114" +
    "\uffac\115\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac" +
    "\001\002\000\062\002\uffd2\003\255\047\014\063\257\067" +
    "\242\070\052\071\045\074\254\101\061\102\060\103\070" +
    "\104\072\105\054\106\067\107\103\110\110\113\051\114" +
    "\256\115\244\116\243\117\245\120\241\121\233\122\236" +
    "\001\002\000\062\002\uffcf\003\uffcf\047\uffcf\063\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\074\uffcf\101\uffcf\102\uffcf\103\uffcf" +
    "\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\113\uffcf\114" +
    "\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf" +
    "\001\002\000\076\002\uffa8\003\uffa8\047\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\113\uffa8\114\uffa8" +
    "\115\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\001" +
    "\002\000\062\002\uffce\003\uffce\047\uffce\063\uffce\067\uffce" +
    "\070\uffce\071\uffce\074\uffce\101\uffce\102\uffce\103\uffce\104" +
    "\uffce\105\uffce\106\uffce\107\uffce\110\uffce\113\uffce\114\uffce" +
    "\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce\001" +
    "\002\000\076\002\uffa9\003\uffa9\047\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\077\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\113\uffa9\114\uffa9\115" +
    "\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122\uffa9\001\002" +
    "\000\056\003\057\004\046\005\025\011\055\012\044\013" +
    "\071\014\074\015\053\031\050\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\062\002\uffcd" +
    "\003\uffcd\047\uffcd\063\uffcd\067\uffcd\070\uffcd\071\uffcd\074" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd" +
    "\107\uffcd\110\uffcd\113\uffcd\114\uffcd\115\uffcd\116\uffcd\117" +
    "\uffcd\120\uffcd\121\uffcd\122\uffcd\001\002\000\004\015\275" +
    "\001\002\000\056\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\031\050\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\070" +
    "\003\262\026\113\047\014\063\257\064\uffca\065\264\066" +
    "\265\067\242\070\052\071\045\074\254\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\114\256\115\244\116\243\117\245\120\241\121\233" +
    "\122\236\001\002\000\066\003\uffc7\047\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\074\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107" +
    "\uffc7\110\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7" +
    "\120\uffc7\121\uffc7\122\uffc7\001\002\000\066\003\uffc4\047" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\074\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105" +
    "\uffc4\106\uffc4\107\uffc4\110\uffc4\113\uffc4\114\uffc4\115\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\001\002\000" +
    "\066\003\262\047\014\063\257\064\uffcb\065\264\066\265" +
    "\067\242\070\052\071\045\074\254\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\114\256\115\244\116\243\117\245\120\241\121\233\122" +
    "\236\001\002\000\066\003\uffc6\047\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\074\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\120" +
    "\uffc6\121\uffc6\122\uffc6\001\002\000\004\015\271\001\002" +
    "\000\004\064\270\001\002\000\066\003\uffc8\047\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\074\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\122\uffc8\001\002\000\076\002" +
    "\uffcc\003\uffcc\047\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\073\uffcc\074\uffcc\075\uffcc\077" +
    "\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc" +
    "\107\uffcc\110\uffcc\113\uffcc\114\uffcc\115\uffcc\116\uffcc\117" +
    "\uffcc\120\uffcc\121\uffcc\122\uffcc\001\002\000\056\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\031\050\040\064\046\076\070\052\071\045\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\001\002\000\006\016\273\026\113\001\002" +
    "\000\066\003\uffc5\047\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\074\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\113" +
    "\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5" +
    "\122\uffc5\001\002\000\066\003\uffc9\047\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\074\uffc9" +
    "\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107" +
    "\uffc9\110\uffc9\113\uffc9\114\uffc9\115\uffc9\116\uffc9\117\uffc9" +
    "\120\uffc9\121\uffc9\122\uffc9\001\002\000\056\003\057\004" +
    "\046\005\025\011\055\012\044\013\071\014\074\015\053" +
    "\031\050\040\064\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\006\017\277\026\113\001\002\000" +
    "\056\003\057\004\046\005\025\011\055\012\044\013\071" +
    "\014\074\015\053\031\050\040\064\046\076\070\052\071" +
    "\045\101\061\102\060\103\070\104\072\105\054\106\067" +
    "\107\103\110\110\113\051\001\002\000\006\016\301\026" +
    "\113\001\002\000\076\002\uff9c\003\uff9c\047\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c" +
    "\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\113\uff9c\114" +
    "\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\121\uff9c\122\uff9c" +
    "\001\002\000\006\075\uffb8\077\316\001\002\000\004\075" +
    "\315\001\002\000\006\026\113\076\305\001\002\000\064" +
    "\003\313\047\014\063\257\067\242\070\052\071\045\074" +
    "\254\075\uffb2\077\uffb2\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\114\256\115" +
    "\244\116\243\117\245\120\241\121\233\122\236\001\002" +
    "\000\006\075\uffb4\077\uffb4\001\002\000\006\075\uffb5\077" +
    "\uffb5\001\002\000\064\003\313\047\014\063\257\067\242" +
    "\070\052\071\045\074\254\075\uffb3\077\uffb3\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\114\256\115\244\116\243\117\245\120\241\121" +
    "\233\122\236\001\002\000\064\003\uffb0\047\uffb0\063\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\074\uffb0\075\uffb0\077\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120" +
    "\uffb0\121\uffb0\122\uffb0\001\002\000\064\003\uffaf\047\uffaf" +
    "\063\uffaf\067\uffaf\070\uffaf\071\uffaf\074\uffaf\075\uffaf\077" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\107\uffaf\110\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117" +
    "\uffaf\120\uffaf\121\uffaf\122\uffaf\001\002\000\064\003\uffae" +
    "\047\uffae\063\uffae\067\uffae\070\uffae\071\uffae\074\uffae\075" +
    "\uffae\077\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae" +
    "\106\uffae\107\uffae\110\uffae\113\uffae\114\uffae\115\uffae\116" +
    "\uffae\117\uffae\120\uffae\121\uffae\122\uffae\001\002\000\064" +
    "\003\uffb1\047\uffb1\063\uffb1\067\uffb1\070\uffb1\071\uffb1\074" +
    "\uffb1\075\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\110\uffb1\113\uffb1\114\uffb1\115" +
    "\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\001\002" +
    "\000\076\002\uffb9\003\uffb9\047\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\113\uffb9\114\uffb9\115\uffb9" +
    "\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\001\002\000" +
    "\066\003\313\015\317\047\014\063\257\067\242\070\052" +
    "\071\045\074\254\075\uffb2\077\uffb2\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\114\256\115\244\116\243\117\245\120\241\121\233\122" +
    "\236\001\002\000\056\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\031\050\040\064\046" +
    "\076\070\052\071\045\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\001\002\000" +
    "\006\075\uffb6\077\uffb6\001\002\000\006\016\322\026\113" +
    "\001\002\000\064\003\313\047\014\063\257\067\242\070" +
    "\052\071\045\074\254\075\uffb2\077\uffb2\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\114\256\115\244\116\243\117\245\120\241\121\233" +
    "\122\236\001\002\000\006\075\uffb7\077\uffb7\001\002\000" +
    "\062\002\uffd0\003\uffd0\047\uffd0\063\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\074\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\110\uffd0\113\uffd0\114\uffd0\115\uffd0" +
    "\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122\uffd0\001\002\000" +
    "\056\003\057\004\046\005\025\011\055\012\044\013\071" +
    "\014\074\015\053\031\050\040\064\046\076\070\052\071" +
    "\045\101\061\102\060\103\070\104\072\105\054\106\067" +
    "\107\103\110\110\113\051\001\002\000\006\017\327\026" +
    "\113\001\002\000\056\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\031\050\040\064\046" +
    "\076\070\052\071\045\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\001\002\000" +
    "\006\017\331\026\113\001\002\000\056\003\057\004\046" +
    "\005\025\011\055\012\044\013\071\014\074\015\053\031" +
    "\050\040\064\046\076\070\052\071\045\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\001\002\000\006\016\333\026\113\001\002\000\076" +
    "\002\uff99\003\uff99\047\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\073\uff99\074\uff99\075\uff99" +
    "\077\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106" +
    "\uff99\107\uff99\110\uff99\113\uff99\114\uff99\115\uff99\116\uff99" +
    "\117\uff99\120\uff99\121\uff99\122\uff99\001\002\000\056\003" +
    "\057\004\046\005\025\011\055\012\044\013\071\014\074" +
    "\015\053\031\050\040\064\046\076\070\052\071\045\101" +
    "\061\102\060\103\070\104\072\105\054\106\067\107\103" +
    "\110\110\113\051\001\002\000\006\017\336\026\113\001" +
    "\002\000\056\003\057\004\046\005\025\011\055\012\044" +
    "\013\071\014\074\015\053\031\050\040\064\046\076\070" +
    "\052\071\045\101\061\102\060\103\070\104\072\105\054" +
    "\106\067\107\103\110\110\113\051\001\002\000\006\017" +
    "\340\026\113\001\002\000\056\003\057\004\046\005\025" +
    "\011\055\012\044\013\071\014\074\015\053\031\050\040" +
    "\064\046\076\070\052\071\045\101\061\102\060\103\070" +
    "\104\072\105\054\106\067\107\103\110\110\113\051\001" +
    "\002\000\006\017\342\026\113\001\002\000\056\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\031\050\040\064\046\076\070\052\071\045\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\001\002\000\006\017\344\026\113\001\002" +
    "\000\056\003\057\004\046\005\025\011\055\012\044\013" +
    "\071\014\074\015\053\031\050\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\006\016\346" +
    "\026\113\001\002\000\076\002\uff9b\003\uff9b\047\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\077\uff9b\101\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\113\uff9b" +
    "\114\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b\122" +
    "\uff9b\001\002\000\056\003\057\004\046\005\025\011\055" +
    "\012\044\013\071\014\074\015\053\031\050\040\064\046" +
    "\076\070\052\071\045\101\061\102\060\103\070\104\072" +
    "\105\054\106\067\107\103\110\110\113\051\001\002\000" +
    "\006\017\351\026\113\001\002\000\056\003\057\004\046" +
    "\005\025\011\055\012\044\013\071\014\074\015\053\031" +
    "\050\040\064\046\076\070\052\071\045\101\061\102\060" +
    "\103\070\104\072\105\054\106\067\107\103\110\110\113" +
    "\051\001\002\000\006\017\353\026\113\001\002\000\056" +
    "\003\057\004\046\005\025\011\055\012\044\013\071\014" +
    "\074\015\053\031\050\040\064\046\076\070\052\071\045" +
    "\101\061\102\060\103\070\104\072\105\054\106\067\107" +
    "\103\110\110\113\051\001\002\000\006\017\355\026\113" +
    "\001\002\000\056\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\031\050\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\006" +
    "\016\357\026\113\001\002\000\076\002\uff9a\003\uff9a\047" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a" +
    "\071\uff9a\073\uff9a\074\uff9a\075\uff9a\077\uff9a\101\uff9a\102" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a" +
    "\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\121" +
    "\uff9a\122\uff9a\001\002\000\004\032\361\001\002\000\056" +
    "\003\057\004\046\005\025\011\055\012\044\013\071\014" +
    "\074\015\053\031\050\040\064\046\076\070\052\071\045" +
    "\101\061\102\060\103\070\104\072\105\054\106\067\107" +
    "\103\110\110\113\051\001\002\000\006\017\363\026\113" +
    "\001\002\000\010\003\365\070\366\071\364\001\002\000" +
    "\004\015\uffc1\001\002\000\004\015\uffc0\001\002\000\004" +
    "\015\uffc2\001\002\000\004\015\370\001\002\000\004\005" +
    "\025\001\002\000\004\016\372\001\002\000\004\032\373" +
    "\001\002\000\056\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\031\050\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\006" +
    "\026\113\072\375\001\002\000\062\003\u0102\047\014\063" +
    "\257\067\242\070\052\071\045\073\uffbe\074\254\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\114\256\115\244\116\243\117\245\120\241" +
    "\121\233\122\236\001\002\000\004\073\u0104\001\002\000" +
    "\062\003\uffbb\047\uffbb\063\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\073\uffbb\074\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\113\uffbb\114\uffbb\115\uffbb" +
    "\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\001\002\000" +
    "\062\003\u0102\047\014\063\257\067\242\070\052\071\045" +
    "\073\uffbf\074\254\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\114\256\115\244" +
    "\116\243\117\245\120\241\121\233\122\236\001\002\000" +
    "\062\003\uffbc\047\uffbc\063\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\073\uffbc\074\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\110\uffbc\113\uffbc\114\uffbc\115\uffbc" +
    "\116\uffbc\117\uffbc\120\uffbc\121\uffbc\122\uffbc\001\002\000" +
    "\062\003\uffba\047\uffba\063\uffba\067\uffba\070\uffba\071\uffba" +
    "\073\uffba\074\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\106\uffba\107\uffba\110\uffba\113\uffba\114\uffba\115\uffba" +
    "\116\uffba\117\uffba\120\uffba\121\uffba\122\uffba\001\002\000" +
    "\062\003\uffbd\047\uffbd\063\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\073\uffbd\074\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\113\uffbd\114\uffbd\115\uffbd" +
    "\116\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd\001\002\000" +
    "\076\002\uffc3\003\uffc3\047\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\113\uffc3\114\uffc3\115\uffc3\116" +
    "\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\001\002\000\056" +
    "\003\057\004\046\005\025\011\055\012\044\013\071\014" +
    "\074\015\053\031\050\040\064\046\076\070\052\071\045" +
    "\101\061\102\060\103\070\104\072\105\054\106\067\107" +
    "\103\110\110\113\051\001\002\000\006\017\u0107\026\113" +
    "\001\002\000\056\003\057\004\046\005\025\011\055\012" +
    "\044\013\071\014\074\015\053\031\050\040\064\046\076" +
    "\070\052\071\045\101\061\102\060\103\070\104\072\105" +
    "\054\106\067\107\103\110\110\113\051\001\002\000\006" +
    "\017\u0109\026\113\001\002\000\056\003\057\004\046\005" +
    "\025\011\055\012\044\013\071\014\074\015\053\031\050" +
    "\040\064\046\076\070\052\071\045\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\001\002\000\006\016\u010b\026\113\001\002\000\076\002" +
    "\uff98\003\uff98\047\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\073\uff98\074\uff98\075\uff98\077" +
    "\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\110\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117" +
    "\uff98\120\uff98\121\uff98\122\uff98\001\002\000\004\005\025" +
    "\001\002\000\004\017\u010e\001\002\000\020\003\032\020" +
    "\036\021\035\022\031\023\030\024\034\025\037\001\002" +
    "\000\004\017\u0110\001\002\000\056\003\057\004\046\005" +
    "\025\011\055\012\044\013\071\014\074\015\053\031\050" +
    "\040\064\046\076\070\052\071\045\101\061\102\060\103" +
    "\070\104\072\105\054\106\067\107\103\110\110\113\051" +
    "\001\002\000\006\016\u0112\026\113\001\002\000\076\002" +
    "\uff96\003\uff96\047\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\073\uff96\074\uff96\075\uff96\077" +
    "\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96" +
    "\107\uff96\110\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117" +
    "\uff96\120\uff96\121\uff96\122\uff96\001\002\000\056\003\057" +
    "\004\046\005\025\011\055\012\044\013\071\014\074\015" +
    "\053\031\050\040\064\046\076\070\052\071\045\101\061" +
    "\102\060\103\070\104\072\105\054\106\067\107\103\110" +
    "\110\113\051\001\002\000\006\017\u0115\026\113\001\002" +
    "\000\056\003\057\004\046\005\025\011\055\012\044\013" +
    "\071\014\074\015\053\031\050\040\064\046\076\070\052" +
    "\071\045\101\061\102\060\103\070\104\072\105\054\106" +
    "\067\107\103\110\110\113\051\001\002\000\006\017\u0117" +
    "\026\113\001\002\000\056\003\057\004\046\005\025\011" +
    "\055\012\044\013\071\014\074\015\053\031\050\040\064" +
    "\046\076\070\052\071\045\101\061\102\060\103\070\104" +
    "\072\105\054\106\067\107\103\110\110\113\051\001\002" +
    "\000\006\017\u0119\026\113\001\002\000\056\003\057\004" +
    "\046\005\025\011\055\012\044\013\071\014\074\015\053" +
    "\031\050\040\064\046\076\070\052\071\045\101\061\102" +
    "\060\103\070\104\072\105\054\106\067\107\103\110\110" +
    "\113\051\001\002\000\006\016\u011b\026\113\001\002\000" +
    "\076\002\uff97\003\uff97\047\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\073\uff97\074\uff97\075" +
    "\uff97\077\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\107\uff97\110\uff97\113\uff97\114\uff97\115\uff97\116" +
    "\uff97\117\uff97\120\uff97\121\uff97\122\uff97\001\002\000\004" +
    "\010\ufffd\001\002\000\020\003\u0126\010\uffe7\051\u012b\052" +
    "\u0129\053\u012a\061\u011f\062\u0121\001\002\000\020\003\uffe5" +
    "\010\uffe5\051\uffe5\052\uffe5\053\uffe5\061\uffe5\062\uffe5\001" +
    "\002\000\004\015\u0151\001\002\000\020\003\uffe3\010\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\061\uffe3\062\uffe3\001\002\000" +
    "\004\015\u014a\001\002\000\020\003\uffe1\010\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\061\uffe1\062\uffe1\001\002\000\020\003" +
    "\uffe2\010\uffe2\051\uffe2\052\uffe2\053\uffe2\061\uffe2\062\uffe2" +
    "\001\002\000\020\003\uffe4\010\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\061\uffe4\062\uffe4\001\002\000\004\010\uffe9\001\002" +
    "\000\020\003\uffdf\010\uffdf\051\uffdf\052\uffdf\053\uffdf\061" +
    "\uffdf\062\uffdf\001\002\000\020\003\u0126\010\uffe8\051\u012b" +
    "\052\u0129\053\u012a\061\u011f\062\u0121\001\002\000\020\003" +
    "\uffe0\010\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\062\uffe0" +
    "\001\002\000\004\015\u013e\001\002\000\004\015\u0133\001" +
    "\002\000\004\015\u012c\001\002\000\004\004\046\001\002" +
    "\000\004\017\u012e\001\002\000\004\046\076\001\002\000" +
    "\004\017\u0130\001\002\000\004\046\076\001\002\000\004" +
    "\016\u0132\001\002\000\020\003\uffde\010\uffde\051\uffde\052" +
    "\uffde\053\uffde\061\uffde\062\uffde\001\002\000\004\004\046" +
    "\001\002\000\004\017\u0135\001\002\000\004\046\076\001" +
    "\002\000\004\017\u0137\001\002\000\004\004\046\001\002" +
    "\000\004\017\u0139\001\002\000\004\004\046\001\002\000" +
    "\004\017\u013b\001\002\000\004\004\046\001\002\000\004" +
    "\016\u013d\001\002\000\020\003\uffd6\010\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\061\uffd6\062\uffd6\001\002\000\004\004\046" +
    "\001\002\000\004\017\u0140\001\002\000\016\003\u0142\054" +
    "\u0145\055\u0146\056\u0141\057\u0147\060\u0143\001\002\000\004" +
    "\016\uffda\001\002\000\004\016\uffd7\001\002\000\004\016" +
    "\uffd8\001\002\000\004\016\u0148\001\002\000\004\016\uffdc" +
    "\001\002\000\004\016\uffdb\001\002\000\004\016\uffd9\001" +
    "\002\000\020\003\uffdd\010\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\061\uffdd\062\uffdd\001\002\000\020\003\uffe6\010\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\001\002\000\004" +
    "\004\046\001\002\000\004\017\u014c\001\002\000\004\046" +
    "\076\001\002\000\004\017\u014e\001\002\000\004\004\046" +
    "\001\002\000\004\016\u0150\001\002\000\020\003\uffd4\010" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\061\uffd4\062\uffd4\001\002" +
    "\000\004\004\046\001\002\000\004\017\u0153\001\002\000" +
    "\004\046\076\001\002\000\004\017\u0155\001\002\000\004" +
    "\004\046\001\002\000\004\017\u0157\001\002\000\004\004" +
    "\046\001\002\000\004\016\u0159\001\002\000\020\003\uffd5" +
    "\010\uffd5\051\uffd5\052\uffd5\053\uffd5\061\uffd5\062\uffd5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\014\002\010\011\007\012\004\013\003\027" +
    "\005\001\001\000\004\036\u011b\001\001\000\004\050\230" +
    "\001\001\000\002\001\001\000\014\026\015\030\012\031" +
    "\021\032\020\033\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\015\032" +
    "\022\033\014\001\001\000\002\001\001\000\004\003\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\061\004\064\005\106\006\062\007\065\010\055\014" +
    "\072\015\105\016\104\017\103\020\101\021\100\022\077" +
    "\023\076\024\074\025\046\075\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\061\004\064\005\106\006\062\007\065\010\055" +
    "\020\217\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\061\004\064\005\106\006\062\007\065\010\055\014" +
    "\203\015\105\016\104\017\103\020\101\021\100\022\077" +
    "\023\076\024\074\025\046\075\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\061\004\064\005\106\006\062" +
    "\007\065\010\055\022\163\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\061\004\064\005\106" +
    "\006\062\007\065\010\055\014\111\015\105\016\104\017" +
    "\103\020\101\021\100\022\077\023\076\024\074\025\046" +
    "\075\042\001\001\000\002\001\001\000\042\003\061\004" +
    "\064\005\106\006\062\007\065\010\055\015\114\016\104" +
    "\017\103\020\101\021\100\022\077\023\076\024\074\025" +
    "\046\075\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\016\116\017\103\020\101\021\100\022\077\023\076" +
    "\024\074\025\046\075\042\001\001\000\002\001\001\000" +
    "\036\003\061\004\064\005\106\006\062\007\065\010\055" +
    "\017\120\020\101\021\100\022\077\023\076\024\074\025" +
    "\046\075\042\001\001\000\002\001\001\000\044\003\061" +
    "\004\064\005\106\006\062\007\065\010\055\014\122\015" +
    "\105\016\104\017\103\020\101\021\100\022\077\023\076" +
    "\024\074\025\046\075\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\061\004\064\005\106\006\062" +
    "\007\065\010\055\021\137\022\077\023\076\024\074\025" +
    "\046\075\042\001\001\000\032\003\061\004\064\005\106" +
    "\006\062\007\065\010\055\021\136\022\077\023\076\024" +
    "\074\025\046\075\042\001\001\000\032\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\021\135\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\032\003\061" +
    "\004\064\005\106\006\062\007\065\010\055\021\134\022" +
    "\077\023\076\024\074\025\046\075\042\001\001\000\032" +
    "\003\061\004\064\005\106\006\062\007\065\010\055\021" +
    "\133\022\077\023\076\024\074\025\046\075\042\001\001" +
    "\000\032\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\021\132\022\077\023\076\024\074\025\046\075\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\023\147\024\074\025\046\075\042\001\001\000\026" +
    "\003\061\004\064\005\106\006\062\007\065\010\055\023" +
    "\142\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\024\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\024\146\025\046\075\042\001\001\000\024\003\061" +
    "\004\064\005\106\006\062\007\065\010\055\024\145\025" +
    "\046\075\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\151\001\001\000\002\001" +
    "\001\000\004\034\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\061\004\064\005\106\006\062\007" +
    "\065\010\055\014\156\015\105\016\104\017\103\020\101" +
    "\021\100\022\077\023\076\024\074\025\046\075\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\061" +
    "\004\064\005\106\006\062\007\065\010\055\014\161\015" +
    "\105\016\104\017\103\020\101\021\100\022\077\023\076" +
    "\024\074\025\046\075\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\014\165\015\105\016" +
    "\104\017\103\020\101\021\100\022\077\023\076\024\074" +
    "\025\046\075\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\061\004\064\005\106\006\062\007\065" +
    "\010\055\014\170\015\105\016\104\017\103\020\101\021" +
    "\100\022\077\023\076\024\074\025\046\075\042\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\172\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\044\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\014\174\015\105\016" +
    "\104\017\103\020\101\021\100\022\077\023\076\024\074" +
    "\025\046\075\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\177\001\001\000\002\001\001\000\004" +
    "\034\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\206\001\001" +
    "\000\002\001\001\000\004\034\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\061\004\064\005\106" +
    "\006\062\007\065\010\055\014\213\015\105\016\104\017" +
    "\103\020\101\021\100\022\077\023\076\024\074\025\046" +
    "\075\042\001\001\000\002\001\001\000\044\003\061\004" +
    "\064\005\106\006\062\007\065\010\055\014\215\015\105" +
    "\016\104\017\103\020\101\021\100\022\077\023\076\024" +
    "\074\025\046\075\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\221\001\001\000" +
    "\002\001\001\000\004\034\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\226\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\026\250\051\234\052\246\053\247\054" +
    "\233\060\236\064\252\074\251\075\237\076\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\250\053\323\054\233\060\236\064\252\074\251\075" +
    "\237\076\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\061\004" +
    "\064\005\106\006\062\007\065\010\055\014\303\015\105" +
    "\016\104\017\103\020\101\021\100\022\077\023\076\024" +
    "\074\025\046\065\302\066\301\075\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\061\004\064\005" +
    "\106\006\062\007\065\010\055\014\257\015\105\016\104" +
    "\017\103\020\101\021\100\022\077\023\076\024\074\025" +
    "\046\075\042\001\001\000\026\026\250\054\233\055\265" +
    "\056\262\057\266\060\236\064\252\074\260\075\237\076" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\250\054\233\057\273\060\236\064\252\074\260\075" +
    "\237\076\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\061\004\064\005\106\006\062\007\065\010\055" +
    "\014\271\015\105\016\104\017\103\020\101\021\100\022" +
    "\077\023\076\024\074\025\046\075\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\061\004\064\005\106\006\062\007\065\010\055\014\275" +
    "\015\105\016\104\017\103\020\101\021\100\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\044\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\014\277\015\105\016\104\017\103\020\101\021\100" +
    "\022\077\023\076\024\074\025\046\075\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\026\250\054\233\060" +
    "\236\064\252\067\306\070\305\071\307\072\310\074\311" +
    "\075\237\076\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\026\250\054\233\060\236\064\252\072\313" +
    "\074\311\075\237\076\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\026\250\054\233\060\236\064\252\067" +
    "\317\070\305\071\307\072\310\074\311\075\237\076\245" +
    "\001\001\000\044\003\061\004\064\005\106\006\062\007" +
    "\065\010\055\014\320\015\105\016\104\017\103\020\101" +
    "\021\100\022\077\023\076\024\074\025\046\075\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\026\250" +
    "\054\233\060\236\064\252\067\322\070\305\071\307\072" +
    "\310\074\311\075\237\076\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\325\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\044\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\014\327\015\105\016" +
    "\104\017\103\020\101\021\100\022\077\023\076\024\074" +
    "\025\046\075\042\001\001\000\002\001\001\000\044\003" +
    "\061\004\064\005\106\006\062\007\065\010\055\014\331" +
    "\015\105\016\104\017\103\020\101\021\100\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\334\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\044\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\014\336\015\105\016" +
    "\104\017\103\020\101\021\100\022\077\023\076\024\074" +
    "\025\046\075\042\001\001\000\002\001\001\000\044\003" +
    "\061\004\064\005\106\006\062\007\065\010\055\014\340" +
    "\015\105\016\104\017\103\020\101\021\100\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\044\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\014\342\015\105\016\104\017\103\020\101\021\100" +
    "\022\077\023\076\024\074\025\046\075\042\001\001\000" +
    "\002\001\001\000\044\003\061\004\064\005\106\006\062" +
    "\007\065\010\055\014\344\015\105\016\104\017\103\020" +
    "\101\021\100\022\077\023\076\024\074\025\046\075\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\061\004\064\005\106\006\062\007\065\010\055\014\347" +
    "\015\105\016\104\017\103\020\101\021\100\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\044\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\014\351\015\105\016\104\017\103\020\101\021\100" +
    "\022\077\023\076\024\074\025\046\075\042\001\001\000" +
    "\002\001\001\000\044\003\061\004\064\005\106\006\062" +
    "\007\065\010\055\014\353\015\105\016\104\017\103\020" +
    "\101\021\100\022\077\023\076\024\074\025\046\075\042" +
    "\001\001\000\002\001\001\000\044\003\061\004\064\005" +
    "\106\006\062\007\065\010\055\014\355\015\105\016\104" +
    "\017\103\020\101\021\100\022\077\023\076\024\074\025" +
    "\046\075\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\361\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\004\100\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\373\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\026\026\250\054\233" +
    "\060\236\061\375\062\377\063\u0100\064\252\074\376\075" +
    "\237\076\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\250\054\233\060\236\063\u0102\064\252\074" +
    "\376\075\237\076\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\061\004\064\005\106\006\062\007\065\010\055\014\u0105" +
    "\015\105\016\104\017\103\020\101\021\100\022\077\023" +
    "\076\024\074\025\046\075\042\001\001\000\002\001\001" +
    "\000\044\003\061\004\064\005\106\006\062\007\065\010" +
    "\055\014\u0107\015\105\016\104\017\103\020\101\021\100" +
    "\022\077\023\076\024\074\025\046\075\042\001\001\000" +
    "\002\001\001\000\044\003\061\004\064\005\106\006\062" +
    "\007\065\010\055\014\u0109\015\105\016\104\017\103\020" +
    "\101\021\100\022\077\023\076\024\074\025\046\075\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u010c\001\001\000\002\001\001\000\004\034\u010e\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\u0110\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\061\004\064\005\106\006\062\007\065\010\055\014" +
    "\u0113\015\105\016\104\017\103\020\101\021\100\022\077" +
    "\023\076\024\074\025\046\075\042\001\001\000\002\001" +
    "\001\000\044\003\061\004\064\005\106\006\062\007\065" +
    "\010\055\014\u0115\015\105\016\104\017\103\020\101\021" +
    "\100\022\077\023\076\024\074\025\046\075\042\001\001" +
    "\000\002\001\001\000\044\003\061\004\064\005\106\006" +
    "\062\007\065\010\055\014\u0117\015\105\016\104\017\103" +
    "\020\101\021\100\022\077\023\076\024\074\025\046\075" +
    "\042\001\001\000\002\001\001\000\044\003\061\004\064" +
    "\005\106\006\062\007\065\010\055\014\u0119\015\105\016" +
    "\104\017\103\020\101\021\100\022\077\023\076\024\074" +
    "\025\046\075\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\037\u0124\040\u0126\041\u011d" +
    "\042\u0123\043\u011f\044\u0122\046\u0121\047\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\041\u0148" +
    "\042\u0123\043\u011f\044\u0122\046\u0121\047\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u012c\001\001\000\002\001\001\000" +
    "\004\025\u012e\001\001\000\002\001\001\000\004\025\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0133\001\001\000\002\001\001\000\004\025\u0135\001\001" +
    "\000\002\001\001\000\004\004\u0137\001\001\000\002\001" +
    "\001\000\004\004\u0139\001\001\000\002\001\001\000\004" +
    "\004\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u013e\001\001\000\002\001\001\000\004\045\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u014a\001\001\000\002\001\001\000\004\025\u014c" +
    "\001\001\000\002\001\001\000\004\004\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0151\001\001" +
    "\000\002\001\001\000\004\025\u0153\001\001\000\002\001" +
    "\001\000\004\004\u0155\001\001\000\002\001\001\000\004" +
    "\004\u0157\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public Enemigos enemigos =new Enemigos(50);
	public LinkedList<compiler.Error> errores=new LinkedList<>();
	
	
	public void report_error(String message, Object info){
		compiler.Error e=new compiler.Error(message,null,null);
		if(info instanceof java_cup.runtime.Symbol){
			e.setSym((java_cup.runtime.Symbol)info);
		}
		errores.add(e);
	}
	public void report_fatal_error(String message,Object info){
		report_error(message,info);
		errores.getLast().println();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	
	compiler.Error.Type LEXICO 		= compiler.Error.Type.LEXIC;
	compiler.Error.Type SINTACTICO 	= compiler.Error.Type.SYNTACTIC;
	compiler.Error.Type SEMANTICO 	= compiler.Error.Type.SEMANTIC;
	String ERROR_ID					= compiler.Error.ERROR_ID;
	String ERROR_INT				= compiler.Error.ERROR_INT;
	String ERROR_BOOLEAN			= compiler.Error.ERROR_BOOLEAN;
	
	Enemigos.Simbolo.Tipo	STRING	=	Enemigos.Simbolo.Tipo.STRING;
	Enemigos.Simbolo.Tipo	BOOLEAN	=	Enemigos.Simbolo.Tipo.BOOLEAN;
	Enemigos.Simbolo.Tipo	INTEGER	=	Enemigos.Simbolo.Tipo.INTEGER;
	Enemigos.Simbolo.Tipo	LONG	=	Enemigos.Simbolo.Tipo.LONG;
	Enemigos.Simbolo.Tipo	CHAR	=	Enemigos.Simbolo.Tipo.CHAR;
	Enemigos.Simbolo.Tipo	FLOAT	=	Enemigos.Simbolo.Tipo.FLOAT;
	
	
	Enemigos.Simbolo.Rol	VARIABLE	=	Enemigos.Simbolo.Rol.VARIABLE;
	Enemigos.Simbolo.Rol	METODO		=	Enemigos.Simbolo.Rol.METODO;
	Enemigos.Simbolo.Rol	FUNCION		=	Enemigos.Simbolo.Rol.FUNCION;
	
	Operacion	SUMA				=	Operacion.SUMA;
	Operacion	RESTA				=	Operacion.RESTA;
	Operacion	MULTIPLICACION		=	Operacion.MULTIPLICACION;
	Operacion	DIVISION			=	Operacion.DIVISION;
	
	
	public void error(String msg, java_cup.runtime.Symbol sym,compiler.Error.Type type){
		compiler.Error e=parser.errores.getLast();
		if(msg!=null){
			e.setMsg(msg);
		}
		if(sym!=null){
			e.setSym(sym);
		}
		e.setType(type);
		e.println();
	}
	public void errorAll(String msg,Object sym,compiler.Error.Type type){
		parser.report_error(msg,sym);
		error(null,null,type);
	}
	
	
	public Enemigos getEnemigos(){
		return parser.enemigos;
	}
	
	public HashMap<Integer,Enemigos.Imagen> getImagenMap(){
		return getEnemigos().getImagenMap();
	}
	public HashMap<Integer,Enemigos.Potencia> getPotenciaMap(){
		return getEnemigos().getPotenciaMap();
	}
	public HashMap<Integer,Enemigos.Arma> getArmaMap(){
		return getEnemigos().getArmaMap();
	}
	public HashMap<Integer,Enemigos.Enemigo> getEnemigoMap(){
		return getEnemigos().getEnemigoMap();
	}
	public HashMap<Integer,Enemigos.Estrategia> getEstrategiaMap(){
		return getEnemigos().getEstrategiaMap();
	}
	
	
	Hoja newHoja(Operacion oper,Hoja left,Hoja right){
		return getEnemigos().new Hoja(oper,left,right);
	}
	Hoja newHoja(Object valor,Enemigos.Simbolo.Tipo tipo,Object symbol){
		return getEnemigos().new Hoja(valor,tipo,symbol);
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x,STRING,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",STRING);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // long ::= LONG 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x,LONG,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",LONG);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // float ::= FLOAT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x,FLOAT,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",FLOAT);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x,BOOLEAN,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",BOOLEAN);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // char ::= CHAR 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x.replaceAll("'",""),CHAR,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",CHAR);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					Hoja hoja=newHoja(x,INTEGER,sym);
					
					a.set("hoja",hoja);
					a.set("tipo",INTEGER);
					a.set("val",x);
					a.set("sym",sym);
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Attr a=new Attr();
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top);
					
					Hoja hoja=newHoja(x,null,sym);
					hoja.setVar(true);
					
					a.set("isVar",true);
					a.set("hoja",hoja);
					a.set("rol",VARIABLE);
					a.set("val",x);
					a.set("sym",sym);
					
					RESULT=a;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr8 ::= error 
            {
              Attr RESULT =null;
		
					error("Se esperaba un valor.",null,SINTACTICO);
					RESULT=new Attr();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr8 ::= P1 expr P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr8 ::= be_functions 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr8 ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr8 ::= long 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr8 ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr8 ::= float 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr8 ::= char 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr8 ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr8 ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr8",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr7 ::= expr8 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr7 ::= expr7 DIV expr8 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(DIVISION,left,right);
					
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr7 ::= expr7 MULTI expr8 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(MULTIPLICACION,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr6 ::= expr7 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr6 ::= expr6 PLUS expr7 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(SUMA,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr6 ::= expr6 MINUS expr7 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(RESTA,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr5 ::= expr6 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr5 ::= ENULL expr6 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)x.get("hoja");
					Hoja right=null;
					Hoja hoja=newHoja(Operacion.ENULL,left,right);
					
					Boolean b1=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1);
					
					x.clear();
					x.set("there's var",b);
					x.set("hoja",hoja);
					
					RESULT=x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr4 ::= expr5 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr4 ::= expr4 LETHAN expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.LETHAN,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr4 ::= expr4 LTHAN expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.LTHAN,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr4 ::= expr4 BETHAN expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.BETHAN,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr4 ::= expr4 BTHAN expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.BTHAN,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr4 ::= expr4 NEQUAL expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.NEQUAL,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr4 ::= expr4 EQUAL expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.EQUAL,left,right);
					
					l.clear();
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr3 ::= expr4 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr3 ::= NOT expr4 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)x.get("hoja");
					Hoja right=null;
					Hoja hoja=newHoja(Operacion.NOT,left,right);
					
					Boolean b1=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1);
					
					x.clear();
					x.set("there's var",b);
					x.set("hoja",hoja);
					
					RESULT=x;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr2 ::= expr3 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr2 ::= expr2 AND expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.AND,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr1 ::= expr2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr1 ::= expr1 OR expr2 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.OR,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expr1 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expr XOR expr1 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.XOR,left,right);
					
					Boolean b1=l.getBoolean("there's var");
					Boolean b2=x.getBoolean("there's var");
					boolean b=(b1==null?false:b1)||(b2==null?false:b2);
					
					l.clear();
					l.set("there's var",b);
					l.set("hoja",hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // println ::= PROC_PRINTLN P1 expr P2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=(Hoja)e.get("hoja");
						Hoja right=null;
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-3);
						Hoja hoja=newHoja(Operacion.PRINTLN,left,right);
						hoja.setSymbol(sym);
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("println",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // be_methods ::= PROC_SETF P1 id COMA bd_type COMA expr P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("val");
						Enemigos.Simbolo.Tipo tipo=(Enemigos.Simbolo.Tipo)t.get("tipo");
						
						Hoja left=newHoja(new Object[]{nombre,tipo},tipo,x.get("sym"));
						Hoja right=(Hoja)e.get("hoja");
						Hoja hoja=newHoja(Operacion.SETF,left,right);
						
						
						left.setVar(true);
						x.set("hoja",hoja);
						
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // be_methods ::= PROC_ASIGNAR_HABILIDAD P1 expr COMA expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i3 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ASIGNAR_HABILIDAD,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-9);
						Hoja estrategia		=(Hoja)i.get("hoja");
						Hoja enemigo		=(Hoja)i1.get("hoja");
						Hoja arma			=(Hoja)i2.get("hoja");
						Hoja detonaciones	=(Hoja)i3.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{estrategia,enemigo,arma,detonaciones});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // be_methods ::= PROC_GIRAR P1 expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.GIRAR,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
						Hoja estrategia	=(Hoja)i.get("hoja");
						Hoja enemigo	=(Hoja)i1.get("hoja");
						Hoja orientacion=(Hoja)i2.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{estrategia,enemigo,orientacion});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // be_methods ::= PROC_AVANZAR P1 expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ASIGNAR_SALTO,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-10);
						Hoja estrategia	=(Hoja)i.get("hoja");
						Hoja enemigo	=(Hoja)i1.get("hoja");
						Hoja pasos		=(Hoja)i2.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{estrategia,enemigo,pasos});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // be_methods ::= PROC_ASIGNAR_SALTO P1 expr COMA expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i3 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ASIGNAR_SALTO,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
						Hoja estrategia	=(Hoja)i.get("hoja");
						Hoja enemigo	=(Hoja)i1.get("hoja");
						Hoja x			=(Hoja)i2.get("hoja");
						Hoja y			=(Hoja)i3.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{estrategia,enemigo,x,y});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // be_methods ::= PROC_ASIGNAR_PASO P1 expr COMA expr COMA expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i3 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i4 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ASIGNAR_PASO,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-11);
						Hoja estrategia	=(Hoja)i.get("hoja");
						Hoja enemigo	=(Hoja)i1.get("hoja");
						Hoja x			=(Hoja)i2.get("hoja");
						Hoja y			=(Hoja)i3.get("hoja");
						Hoja movimiento	=(Hoja)i4.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{estrategia,enemigo,x,y,movimiento});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // be_methods ::= PROC_ASIGNAR_ARMA P1 expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ASIGNAR_ARMA,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
						Hoja enemigo	=(Hoja)i.get("hoja");
						Hoja arma		=(Hoja)i1.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{enemigo,arma});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_methods",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // be_functions ::= FUNC_ARMA_PROPIA P1 expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.ARMA_PROPIA,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
						Hoja enemigo	=(Hoja)i.get("hoja");
						Hoja arma		=(Hoja)i1.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{enemigo,arma});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // be_functions ::= DISMINUIR P1 id COMA bd_type P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("val");
						Tipo tipo=(Tipo)t.get("tipo");
						
						Hoja left=(Hoja)x.get("hoja");
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.DISMINUIR,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
						hoja.setSymbol(sym);
						left.setVal(new Object[]{nombre,tipo});
						left.setTipo(tipo);
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // be_functions ::= AUMENTAR P1 id COMA bd_type P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("val");
						Tipo tipo=(Tipo)t.get("tipo");
						
						Hoja left=(Hoja)x.get("hoja");
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.AUMENTAR,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
						hoja.setSymbol(sym);
						left.setVal(new Object[]{nombre,tipo});
						left.setTipo(tipo);
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // be_functions ::= FUNC_GET_INT P1 expr P2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=(Hoja)e.get("hoja");
						Hoja hoja=newHoja(Operacion.GET_INT,left,null);
						
						e.clear();
						e.set("hoja",hoja);
						
						RESULT=e;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // be_functions ::= FUNC_GET_STR P1 expr P2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=(Hoja)e.get("hoja");
						Hoja hoja=newHoja(Operacion.GET_STR,left,null);
						
						e.clear();
						e.set("hoja",hoja);
						
						RESULT=e;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // be_functions ::= FUNC_GET_BOOL P1 expr P2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=(Hoja)e.get("hoja");
						Hoja hoja=newHoja(Operacion.GET_BOOL,left,null);
						
						e.clear();
						e.set("hoja",hoja);
						
						RESULT=e;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // be_functions ::= FUNC_GET_F P1 id COMA bd_type P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("val");
						Enemigos.Simbolo.Tipo tipo=(Enemigos.Simbolo.Tipo)t.get("tipo");
						
						Hoja left=(Hoja)x.get("hoja");
						left.setVal(new Object[]{nombre,tipo});
						left.setTipo(tipo);
						Hoja hoja=newHoja(Operacion.GET_STR,left,null);
						
						/* if(tipo!=null){
							if(getEnemigos().getSimbolos().contains(nombre,tipo)){
								Enemigos.Simbolo sim=getEnemigos().getSimbolos().get(nombre,tipo);
								Object val=getEnemigos().getPila().get(sim.getPosicion(),sim.getTamanio());
								left.setVar(false);
								left.setVal(val);
								left.setTipo(tipo);
							} else{
								errorAll(compiler.Error.ERROR_VAR_NO_EXISTE,x.get("sym"),SEMANTICO);
								hoja=null;
							}
						} */
						
						x.clear();
						x.set("hoja",hoja);
						
						RESULT=x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // be_functions ::= FUNC_GET_VAL P1 id COMA bd_type P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						String nombre=x.getString("val");
						Simbolo.Tipo tipo=(Simbolo.Tipo)t.get("tipo");
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
						
						Hoja left=(Hoja)x.get("hoja");
						Hoja hoja=newHoja(Operacion.GET_VAL,left,null);
						
						left.setVal(new Object[]{nombre,tipo});
						hoja.setSymbol(sym);
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // be_functions ::= FUNC_BORDE_TABLERO P1 expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.BORDE_TABLERO,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-3);
						Hoja enemigo	=(Hoja)i.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{enemigo});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // be_functions ::= FUNC_GET_LIBRE P1 expr COMA expr COMA expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.GET_LIBRE,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
						Hoja enemigo	=(Hoja)i.get("hoja");
						Hoja x			=(Hoja)i1.get("hoja");
						Hoja y			=(Hoja)i2.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{enemigo,x,y});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // be_functions ::= FUNC_GET_MUNICIONES P1 expr P2 
            {
              Attr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=null;
						Hoja right=null;
						Hoja hoja=newHoja(Operacion.GET_LIBRE,left,right);
						
						Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
						Hoja enemigo	=(Hoja)i.get("hoja");
						
						hoja.setSymbol(sym);
						hoja.setVal(new Object[]{enemigo});
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_functions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // be_stmt ::= println 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // be_stmt ::= be_if 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // be_stmt ::= be_for 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // be_stmt ::= be_while 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // be_stmt ::= be_methods 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // be_stmt ::= be_functions 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // be_if_item_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba sentencia.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_item",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // be_if_item_item ::= be_stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_item",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // be_if_item_list ::= be_if_item_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // be_if_item_list ::= be_if_item_list be_if_item_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Hoja left=(Hoja)l.get("hoja");
						Hoja right=(Hoja)x.get("hoja");
						Hoja hoja=newHoja(Operacion.STMT,left,right);
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // be_if_item_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_body",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // be_if_item_body ::= be_if_item_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item_body",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // be_if_item ::= be_if_item_body 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_item",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // be_if_list ::= expr ENTONCES be_if_item 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)e.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.ELSE_IF,left,right);
					
					LinkedList<Hoja> lista=new LinkedList<>();
					lista.add(hoja);
					
					RESULT=new Attr("lista",lista);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // be_if_list ::= be_if_list OTRO_CASO be_if_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)x.get("hoja");
					Hoja right=null;
					Hoja hoja=newHoja(Operacion.ELSE,left,right);
					
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-1);
					hoja.setSymbol(sym);
					
					LinkedList<Hoja> lista=(LinkedList<Hoja>)l.get("lista");
					lista.add(hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // be_if_list ::= be_if_list OTRO_CASO P1 expr P2 be_if_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					Hoja left=(Hoja)e.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.ELSE_IF,left,right);
					
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
					hoja.setSymbol(sym);
					
					LinkedList<Hoja> lista=(LinkedList<Hoja>)l.get("lista");
					lista.add(hoja);
					
					RESULT=l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // be_if_body ::= be_if_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if_body",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // be_if ::= SI be_if_body FIN_SI 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Hoja left=null;
					Hoja right=null;
					Hoja hoja=newHoja(Operacion.IF,left,right);
					hoja.setVal(x.get("lista"));
					
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
					hoja.setSymbol(sym);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_if",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // be_for_item ::= error 
            {
              Attr RESULT =null;
		error(Error.ERROR_STMT,null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_item",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // be_for_item ::= be_stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_item",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // be_for_list ::= be_for_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // be_for_list ::= be_for_list be_for_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // be_for_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_body",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // be_for_body ::= be_for_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for_body",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // be_for1 ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba 'aumentar' o 'disminuir'.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for1",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // be_for1 ::= DISMINUIR 
            {
              Attr RESULT =null;
		RESULT=new Attr("val","disminuir");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for1",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // be_for1 ::= AUMENTAR 
            {
              Attr RESULT =null;
		RESULT=new Attr("val","aumentar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for1",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // be_for ::= PARA id EQUAL expr COMA be_for1 P1 id P2 EQUAL expr HACER be_for_body FIN_PARA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Attr e1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr v = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr e2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr s = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-13);
					
					String nombre=x.getString("val");
					Tipo tipo=Tipo.INTEGER;
					
					//inicializar la variable setf
					Hoja varl= newHoja(new Object[]{nombre,tipo},tipo,x.get("sym"));
					Hoja varr= (Hoja) e1.get("hoja");
					Hoja var= newHoja(Operacion.SETF,varl,varr);
					
					varl.setVar(true);
					var.setSymbol(sym);
					
					//modificar la variable
					Hoja setl=varl;
					Hoja setr=null;
					Hoja set=newHoja(Operacion.AUMENTAR,setl,setr);
					
					String ad=t.getString("val");
					if(ad.equals("disminuir")){
						set.setOperacion(Operacion.DISMINUIR);
					}
					
					set.setSymbol(sym);
					
					//comparacion
					Hoja iguall=varl;
					Hoja igualr=(Hoja)e2.get("hoja");
					Hoja igual=newHoja(Operacion.NEQUAL,iguall,igualr);
					
					igual.setSymbol(sym);
					
					//FOR
					Hoja left=igual;
					Hoja right= (Hoja)s.get("hoja");
					Hoja hoja=newHoja(Operacion.FOR,left,right);
					
					hoja.setVal(new Object[]{var,set}); 
					hoja.setSymbol(sym);
					
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // be_while_item ::= error 
            {
              Attr RESULT =null;
		errorAll("Se esperaba un sentencia.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_item",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // be_while_item ::= PAUSAR P1 expr P2 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Hoja left=(Hoja)t.get("hoja");
						Hoja hoja=newHoja(Operacion.WHILE_PAUSE,left,null);
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_item",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // be_while_item ::= DETENER 
            {
              Attr RESULT =null;
		
						Hoja left=null;
						Hoja right=null;
						RESULT=new Attr("hoja",newHoja(Operacion.WHILE_STOP,left,right));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_item",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // be_while_item ::= be_stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_item",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // be_while_list ::= be_while_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // be_while_list ::= be_while_list be_while_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Hoja left=(Hoja)l.get("hoja");
						Hoja right=(Hoja)x.get("hoja");
						Hoja hoja=newHoja(Operacion.STMT,left,right);
						
						RESULT=new Attr("hoja",hoja);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // be_while_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // be_while_body ::= be_while_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // be_while ::= MIENTRAS expr be_while_body FIN_MIENTRAS 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr s = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Hoja left=(Hoja)e.get("hoja");
					Hoja right=(Hoja)s.get("hoja");
					Hoja hoja= newHoja(Operacion.WHILE,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_while",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // be_item ::= error 
            {
              Attr RESULT =null;
		errorAll("Se esperaba sentencia.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_item",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // be_item ::= be_stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_item",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // be_list ::= be_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // be_list ::= be_list be_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // be_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_body",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // be_body ::= be_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be_body",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // be ::= BE be_body 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("be",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bc_crear_estrategia ::= CREAR_ESTRATEGIA P1 int COMA string COMA int P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr n = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer id=x.getInt("val");
							String nombre=n.getString("val");
							Integer punteo=i1.getInt("val");
							
							Hoja left=null;
							Hoja right=null;
							Hoja hoja=newHoja(Operacion.CREAR_ESTRATEGIA,left,right);
							
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
							hoja.setVal(new Object[]{id,nombre,punteo});
							hoja.setSymbol(sym);
							
							RESULT=new Attr("hoja",hoja);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_estrategia",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bc_crear_enemigo ::= CREAR_ENEMIGO P1 int COMA string COMA int COMA int P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr n = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer id=x.getInt("val");
							String nombre=n.getString("val");
							Integer potencia=i1.getInt("val");
							Integer imagen=i2.getInt("val");
							
							Hoja left=null;
							Hoja right=null;
							Hoja hoja=newHoja(Operacion.CREAR_ENEMIGO,left,right);
							
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-9);
							hoja.setVal(new Object[]{id,nombre,potencia,imagen});
							hoja.setSymbol(sym);
							
							RESULT=new Attr("hoja",hoja);
							
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_enemigo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bc_crear_arma ::= CREAR_ARMA P1 int COMA string COMA int COMA int COMA int P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr n = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr i1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr i2 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr i3 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer id=x.getInt("val");
							String nombre=n.getString("val");
							Integer min=i1.getInt("val");
							Integer max=i2.getInt("val");
							Integer no=i3.getInt("val");
							
							Hoja left=null;
							Hoja right=null;
							Hoja hoja=newHoja(Operacion.CREAR_ARMA,left,right);
							
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-11);
							hoja.setVal(new Object[]{id,nombre,min,max,no});
							hoja.setSymbol(sym);
							
							RESULT=new Attr("hoja",hoja);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_arma",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bc_crear_potencia_nivel ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba un nivel de potencia.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bc_crear_potencia_nivel ::= HEAVY 
            {
              Attr RESULT =null;
		RESULT=new Attr("nivel",Enemigos.Nivel.HEAVY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bc_crear_potencia_nivel ::= HIGHT 
            {
              Attr RESULT =null;
		RESULT=new Attr("nivel",Enemigos.Nivel.HIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bc_crear_potencia_nivel ::= MEDIUM 
            {
              Attr RESULT =null;
		RESULT=new Attr("nivel",Enemigos.Nivel.MEDIUM);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bc_crear_potencia_nivel ::= LOW 
            {
              Attr RESULT =null;
		RESULT=new Attr("nivel",Enemigos.Nivel.LOW);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bc_crear_potencia_nivel ::= TINNY 
            {
              Attr RESULT =null;
		RESULT=new Attr("nivel",Enemigos.Nivel.TINNY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia_nivel",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bc_crear_potencia ::= CREAR_POTENCIA P1 int COMA bc_crear_potencia_nivel P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr n = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer id=x.getInt("val");
							Enemigos.Nivel nivel=(Enemigos.Nivel)n.get("nivel");
							
							Hoja left=null;
							Hoja right=null;
							Hoja hoja=newHoja(Operacion.CREAR_POTENCIA,left,right);
							
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-5);
							hoja.setVal(new Object[]{id,nivel});
							hoja.setSymbol(sym);
							
							RESULT=new Attr("hoja",hoja);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_potencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bc_crear_imagen ::= CREAR_IMAGEN P1 int COMA string COMA string P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr n = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr r = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Integer id=x.getInt("val");
							String nombre=n.getString("val");
							String ruta=r.getString("val");
							
							
							Hoja left=null;
							Hoja right=null;
							Hoja hoja=newHoja(Operacion.CREAR_IMAGEN,left,right);
							
							Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-7);
							hoja.setVal(new Object[]{id,nombre,ruta});
							hoja.setSymbol(sym);
							
							RESULT=new Attr("hoja",hoja);
							
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_crear_imagen",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bc_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba crear algo.",null,SINTACTICO);RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bc_item ::= bc_crear_estrategia 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bc_item ::= bc_crear_enemigo 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bc_item ::= bc_crear_arma 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bc_item ::= bc_crear_potencia 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bc_item ::= bc_crear_imagen 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_item",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bc_list ::= bc_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bc_list ::= bc_list bc_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bc_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bc_body ::= bc_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bc ::= BC bc_body 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bd_type ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba un tipo.",null,SINTACTICO); RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bd_type ::= KW_LONG 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",LONG);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bd_type ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bd_type ::= KW_FLOAT 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",FLOAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bd_type ::= KW_CHAR 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bd_type ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bd_type ::= KW_INTEGER 
            {
              Attr RESULT =null;
		RESULT=new Attr("tipo",INTEGER);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bd_addf_val ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_addf_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bd_addf_val ::= COMA expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_addf_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bd_addf ::= ADDF P1 id COMA bd_type bd_addf_val P2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Object sym=CUP$Parser$stack.elementAt(CUP$Parser$top-6);
					String id=x.getString("val");
					Enemigos.Simbolo.Tipo tipo=(Enemigos.Simbolo.Tipo)t.get("tipo");
					
					Hoja left= (Hoja) x.get("hoja");
					Hoja right= (Hoja) e.get("hoja");
					Hoja hoja= newHoja(Operacion.ADDF,left,right);
					
					left.setVal(new Object[]{id,tipo});
					hoja.setSymbol(sym);
					
					if(id==null){
						Object sym1=CUP$Parser$stack.elementAt(CUP$Parser$top-4);
						errorAll("Falta identificador.",sym1,SEMANTICO);
					}
					if(tipo==null){
						Object sym1=CUP$Parser$stack.elementAt(CUP$Parser$top-2);
						errorAll("Falta tipo.",sym1,SEMANTICO);
					}
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_addf",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bd_item ::= error 
            {
              Attr RESULT =null;
		error("Se esperaba 'addf'.",null,SINTACTICO); RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_item",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bd_item ::= println 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_item",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bd_item ::= bd_addf 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_item",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bd_list ::= bd_item 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bd_list ::= bd_list bd_item 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bd_body ::= 
            {
              Attr RESULT =null;
		RESULT=new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_body",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bd_body ::= bd_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd_body",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bd ::= BD bd_body 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bd",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bad2 ::= bd 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bad2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bad1 ::= bad2 bc 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bad1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bad ::= bad1 be 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja left=(Hoja)l.get("hoja");
					Hoja right=(Hoja)x.get("hoja");
					Hoja hoja=newHoja(Operacion.STMT,left,right);
					
					RESULT=new Attr("hoja",hoja);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bad",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= bad 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Hoja hoja=(Hoja)x.get("hoja");
					if(parser.errores.isEmpty()){
						hoja.exec();
					}
					System.out.println(".bad compiled...");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

